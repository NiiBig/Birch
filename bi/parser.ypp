%code requires {
  #include "bi/lexer.hpp"
  #include "bi/build/Compiler.hpp"
}

%code {
  #include "bi/expression/all.hpp"
  #include "bi/statement/all.hpp"
  #include "bi/type/all.hpp"

  /**
   * Raw string stack.
   */
  std::stack<std::string> raws;

  /**
   * Push the current raw string onto the stack, and restart it.
   */
  void push_raw() {
    raws.push(raw.str());
    raw.str("");
  }

  /**
   * Pop a raw string from the stack.
   */
  std::string pop_raw() {
    std::string raw = raws.top();
    raws.pop();
    return raw;
  }

  /**
   * Make a location, without documentation string.
   */
  bi::Location* make_loc(YYLTYPE& loc) {
    return new bi::Location(compiler->file, loc.first_line, loc.last_line,
        loc.first_column, loc.last_column);
  }

  /**
   * Make a location, with documentation string.
   */
  bi::Location* make_doc_loc(YYLTYPE& loc) {
    return new bi::Location(compiler->file, loc.first_line, loc.last_line,
        loc.first_column, loc.last_column, pop_raw());
  }

  /**
   * Make an empty expression.
   */
  bi::Expression* empty_expr(YYLTYPE& loc) {
    return new bi::EmptyExpression(make_loc(loc));
  }

  /**
   * Make an empty type.
   */
  bi::Type* empty_type(YYLTYPE& loc) {
    return new bi::EmptyType(make_loc(loc));
  }
}

%union {
  bool valBool;
  int32_t valInt;
  double valReal;
  const char* valString;
  
  bi::Annotation valAnnotation;
  bi::Name* valName;
  bi::Expression* valExpression;
  bi::Type* valType;
  bi::Statement* valStatement;
}

%glr-parser
%expect-rr 2  // `Type?(...)` vs `x?`
%expect 4     // for generics, '<' ambiguous, but closing '>' disambiguates

%token <valString> PROGRAM CLASS TYPE FUNCTION FIBER OPERATOR
%token <valString> IF ELSE FOR IN WHILE DO ASSERT RETURN YIELD CPP HPP
%token <valString> THIS SUPER NIL CLOSED
%token <valString> DOUBLE_BRACE_OPEN DOUBLE_BRACE_CLOSE NAME
%token <valBool> BOOL_LITERAL
%token <valInt> INT_LITERAL
%token <valReal> REAL_LITERAL
%token <valString> STRING_LITERAL
%token <valString> LEFT_OP RIGHT_OP LEFT_TILDE_OP RIGHT_TILDE_OP
%token <valString> AND_OP OR_OP LE_OP GE_OP EQ_OP NE_OP RANGE_OP

%type <valName> name binary_operator unary_operator assignment_operator

%type <valInt> size
%type <valAnnotation> annotation annotations optional_annotations

%type <valExpression> prefix_operator
%type <valExpression> multiplicative_operator additive_operator relational_operator
%type <valExpression> equality_operator logical_and_operator logical_or_operator
%type <valExpression> bool_literal int_literal real_literal string_literal
%type <valExpression> literal identifier
%type <valExpression> this_expression super_expression nil_expression
%type <valExpression> parens_expression sequence_expression cast_expression
%type <valExpression> function_expression primary_expression
%type <valExpression> slice index_expression index_list
%type <valExpression> postfix_expression postfix_query_expression prefix_expression
%type <valExpression> multiplicative_expression additive_expression
%type <valExpression> relational_expression equality_expression
%type <valExpression> logical_and_expression logical_or_expression
%type <valExpression> expression_list expression optional_expression
%type <valExpression> local_variable parameter parameter_list parameters
%type <valExpression> span_expression span_list brackets option option_list options
%type <valExpression> member_parameter member_parameter_list member_parameters optional_member_parameters
%type <valExpression> arguments optional_arguments
%type <valExpression> value optional_value for_index
%type <valExpression> generic generic_list generics optional_generics

%type <valStatement> global_variable_declaration local_variable_declaration
%type <valStatement> function_declaration fiber_declaration program_declaration
%type <valStatement> member_variable_declaration member_function_declaration
%type <valStatement> member_fiber_declaration
%type <valStatement> binary_operator_declaration unary_operator_declaration
%type <valStatement> conversion_operator_declaration assignment_operator_declaration
%type <valStatement> class_declaration alias_declaration basic_declaration
%type <valStatement> cpp hpp assignment expression_statement if for
%type <valStatement> while do_while assertion return yield
%type <valStatement> statement statements optional_statements
%type <valStatement> class_statement class_statements optional_class_statements
%type <valStatement> file_statement file_statements optional_file_statements
%type <valStatement> braces optional_braces
%type <valStatement> class_braces optional_class_braces

%type <valType> type_identifier class_type primary_type tuple_type
%type <valType> sequence_type postfix_type array_type function_type type
%type <valType> type_list parameter_type_list parameter_types
%type <valType> result optional_result

%locations

%start file
%%


/***************************************************************************
 * Names                                                                   *
 ***************************************************************************/

name
    : NAME  { $$ = new bi::Name($1); }
    ;
    
annotation
    : CLOSED  { $$ = bi::IS_CLOSED; }
    ;
    
annotations
    : annotation
    | annotation annotations  { $$ = bi::Annotation($1|$2); }
    ;
    
optional_annotations
    : annotations
    |              { $$ = bi::NONE; }
    ;


/***************************************************************************
 * Expressions                                                             *
 ***************************************************************************/

bool_literal
    : BOOL_LITERAL  { $$ = new bi::Literal<bool>($1, yytext, new bi::BasicType(new bi::Name("Boolean")), make_loc(@$)); }
    ;

int_literal
    : INT_LITERAL  { $$ = new bi::Literal<int64_t>($1, yytext, new bi::AliasType(new bi::Name("Integer")), make_loc(@$)); }
    ;

real_literal
    : REAL_LITERAL  { $$ = new bi::Literal<double>($1, yytext, new bi::AliasType(new bi::Name("Real")), make_loc(@$)); }
    ;

string_literal
    : STRING_LITERAL  { $$ = new bi::Literal<const char*>($1, yytext, new bi::BasicType(new bi::Name("String")), make_loc(@$)); }
    ;

literal
    : bool_literal
    | int_literal
    | real_literal
    | string_literal
    ;

identifier
    : name  { $$ = new bi::Identifier<bi::Unknown>($1, make_loc(@$)); }
    ;

parens_expression
    : '(' expression_list ')'  { $$ = new bi::Parentheses($2, make_loc(@$)); }
    ;

sequence_expression
    : '[' expression_list ']'  { $$ = new bi::Sequence($2, make_loc(@$)); }
    ;

cast_expression
    : primary_type '?' '(' expression ')'  { $$ = new bi::Cast($1, $4, make_loc(@$)); }
    ;

function_expression
    : '@' parameters optional_result optional_braces  { $$ = new bi::LambdaFunction($2, $3, $4, make_loc(@$)); }
    ;

this_expression
    : THIS  { $$ = new bi::This(make_loc(@$)); }
    ;

super_expression
    : SUPER  { $$ = new bi::Super(make_loc(@$)); }
    ;

nil_expression
    : NIL  { $$ = new bi::Nil(make_loc(@$)); }
    ;

primary_expression
    : literal
    | identifier
    | parens_expression
    | sequence_expression
    | cast_expression
    | function_expression
    | this_expression
    | super_expression
    | nil_expression
    ;

index_expression
    : expression RANGE_OP expression  { $$ = new bi::Range($1, $3, make_loc(@$)); }
    | expression                      { $$ = new bi::Index($1, make_loc(@$)); }
    ;
    
index_list
    : index_expression
    | index_expression ',' index_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

slice
    : '[' index_list ']'  { $$ = $2; }
    ;

postfix_expression
    : primary_expression
    | postfix_expression '.' primary_expression  { $$ = new bi::Member($1, $3, make_loc(@$)); }
    | postfix_expression slice                   { $$ = new bi::Slice($1, $2, make_loc(@$)); }
    | postfix_expression arguments               { $$ = new bi::Call($1, $2, make_loc(@$)); }
    | postfix_expression '!'                     { $$ = new bi::Get($1, make_loc(@$)); }
    ;

postfix_query_expression
    : postfix_expression
    | postfix_expression '?'  { $$ = new bi::Query($1, make_loc(@$)); }
    ;

prefix_operator
    : '+'  { $$ = new bi::OverloadedIdentifier<bi::UnaryOperator>(new bi::Name("+"), make_loc(@$)); }
    | '-'  { $$ = new bi::OverloadedIdentifier<bi::UnaryOperator>(new bi::Name("-"), make_loc(@$)); }
    | '!'  { $$ = new bi::OverloadedIdentifier<bi::UnaryOperator>(new bi::Name("!"), make_loc(@$)); }
    ;

prefix_expression
    : postfix_query_expression
    | prefix_operator prefix_expression  { $$ = new bi::UnaryCall($1, $2, make_loc(@$)); }
    ;

multiplicative_operator
    : '*'  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("*"), make_loc(@$)); }
    | '/'  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("/"), make_loc(@$)); }
    ;

multiplicative_expression
    : prefix_expression
    | multiplicative_expression multiplicative_operator prefix_expression  { $$ = new bi::BinaryCall($2, new bi::Binary($1, $3, make_loc(@$)), make_loc(@$)); }
    ;

additive_operator
    : '+'  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("+"), make_loc(@$)); }
    | '-'  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("-"), make_loc(@$)); }
    ;

additive_expression
    : multiplicative_expression
    | additive_expression additive_operator multiplicative_expression  { $$ = new bi::BinaryCall($2, new bi::Binary($1, $3, make_loc(@$)), make_loc(@$)); }
    ;

relational_operator
    : '<'    { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("<"), make_loc(@$)); }
    | '>'    { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name(">"), make_loc(@$)); }
    | LE_OP  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("<="), make_loc(@$)); }
    | GE_OP  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name(">="), make_loc(@$)); }
    ;
    
relational_expression
    : additive_expression
    | relational_expression relational_operator additive_expression  { $$ = new bi::BinaryCall($2, new bi::Binary($1, $3, make_loc(@$)), make_loc(@$)); }
    ;

equality_operator
    : EQ_OP  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("=="), make_loc(@$)); }
    | NE_OP  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("!="), make_loc(@$)); }
    ;

equality_expression
    : relational_expression
    | equality_expression equality_operator relational_expression  { $$ = new bi::BinaryCall($2, new bi::Binary($1, $3, make_loc(@$)), make_loc(@$)); }
    ;

logical_and_operator
    : AND_OP  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("&&"), make_loc(@$)); }
    ;

logical_and_expression
    : equality_expression
    | logical_and_expression logical_and_operator equality_expression  { $$ = new bi::BinaryCall($2, new bi::Binary($1, $3, make_loc(@$)), make_loc(@$)); }
    ;

logical_or_operator
    : OR_OP  { $$ = new bi::OverloadedIdentifier<bi::BinaryOperator>(new bi::Name("||"), make_loc(@$)); }
    ;

logical_or_expression
    : logical_and_expression
    | logical_or_expression logical_or_operator logical_and_expression  { $$ = new bi::BinaryCall($2, new bi::Binary($1, $3, make_loc(@$)), make_loc(@$)); }
    ;

expression
    : logical_or_expression
    ;

optional_expression
    : expression
    |             { $$ = empty_expr(@$); }
    ;

expression_list
    : expression
    | expression ',' expression_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

local_variable
    : name ':' type                             { $$ = new bi::LocalVariable($1, $3, empty_expr(@$), empty_expr(@$), empty_expr(@$), make_loc(@$)); }
    | name ':' type arguments                   { $$ = new bi::LocalVariable($1, $3, empty_expr(@$), $4, empty_expr(@$), make_loc(@$)); }
    | name ':' type value                       { $$ = new bi::LocalVariable($1, $3, empty_expr(@$), empty_expr(@$), $4, make_loc(@$)); }
    | name ':' postfix_type brackets            { $$ = new bi::LocalVariable($1, $3, $4, empty_expr(@$), empty_expr(@$), make_loc(@$)); }
    | name ':' postfix_type brackets arguments  { $$ = new bi::LocalVariable($1, $3, $4, $5, empty_expr(@$), make_loc(@$)); }
    | name ':' postfix_type brackets value      { $$ = new bi::LocalVariable($1, $3, $4, empty_expr(@$), $5, make_loc(@$)); }
    ;

span_expression
    : expression   { $$ = new bi::Span($1, make_loc(@$)); }
    ;
    
span_list
    : span_expression
    | span_expression ',' span_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

brackets
    : '[' span_list ']'  { $$ = $2; }
    ;

parameters
    : '(' ')'                 { $$ = empty_expr(@$); }
    | '(' parameter_list ')'  { $$ = $2; }
    ;

parameter_list
    : parameter
    | parameter ',' parameter_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

parameter
    : name ':' type  { $$ = new bi::Parameter($1, $3, empty_expr(@$), make_loc(@$)); }
    ;

options
    : '(' ')'              { $$ = empty_expr(@$); }
    | '(' option_list ')'  { $$ = $2; }
    ;

option_list
    : option
    | option ',' option_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

option
    : name ':' type optional_value  { $$ = new bi::Parameter($1, $3, $4, make_loc(@$)); }
    ;

member_parameters
    : '(' ')'                        { $$ = empty_expr(@$); }
    | '(' member_parameter_list ')'  { $$ = $2; }
    ;

member_parameter_list
    : member_parameter
    | member_parameter ',' member_parameter_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

member_parameter
    : name ':' type  { $$ = new bi::MemberParameter($1, $3, empty_expr(@$), make_loc(@$)); }
    ;

optional_member_parameters
    : member_parameters
    |                    { $$ = empty_expr(@$); }
    ;

arguments
    : '(' ')'                  { $$ = empty_expr(@$); }
    | '(' expression_list ')'  { $$ = $2; }
    ;

optional_arguments
    : arguments
    |            { $$ = empty_expr(@$); }
    ;

size
    : '_'           { $$ = 1; }
    | '_' ',' size  { $$ = $3 + 1; }
    ;

generics
    : '<' '>'               { $$ = empty_expr(@$); }
    | '<' generic_list '>'  { $$ = $2; }
    ;

generic_list
    : generic
    | generics ',' generic_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

generic
    : name LE_OP primary_type  { $$ = new bi::Generic($1, $3, make_loc(@$)); }
    | name                     { $$ = new bi::Generic($1, new bi::AnyType(make_loc(@$)), make_loc(@$)); }
    ;
    
optional_generics
    : generics
    |           { $$ = empty_expr(@$); }
    ;


/***************************************************************************
 * Statements                                                              *
 ***************************************************************************/

global_variable_declaration
    : name ':' type ';'                             { push_raw(); $$ = new bi::GlobalVariable($1, $3, empty_expr(@$), empty_expr(@$), empty_expr(@$), make_doc_loc(@$)); }
    | name ':' type arguments ';'                   { push_raw(); $$ = new bi::GlobalVariable($1, $3, empty_expr(@$), $4, empty_expr(@$), make_doc_loc(@$)); }
    | name ':' type value ';'                       { push_raw(); $$ = new bi::GlobalVariable($1, $3, empty_expr(@$), empty_expr(@$), $4, make_doc_loc(@$)); }
    | name ':' postfix_type brackets ';'            { push_raw(); $$ = new bi::GlobalVariable($1, $3, $4, empty_expr(@$), empty_expr(@$), make_doc_loc(@$)); }
    | name ':' postfix_type brackets arguments ';'  { push_raw(); $$ = new bi::GlobalVariable($1, $3, $4, $5, empty_expr(@$), make_doc_loc(@$)); }
    | name ':' postfix_type brackets value ';'      { push_raw(); $$ = new bi::GlobalVariable($1, $3, $4, empty_expr(@$), $5, make_doc_loc(@$)); }
    ;

local_variable_declaration
    : local_variable ';'  { push_raw(); $$ = new bi::ExpressionStatement($1, make_doc_loc(@$)); }
    ;

member_variable_declaration
    : name ':' type ';'                             { push_raw(); $$ = new bi::MemberVariable($1, $3, empty_expr(@$), empty_expr(@$), empty_expr(@$), make_doc_loc(@$)); }
    | name ':' type arguments ';'                   { push_raw(); $$ = new bi::MemberVariable($1, $3, empty_expr(@$), $4, empty_expr(@$), make_doc_loc(@$)); }
    | name ':' type value ';'                       { push_raw(); $$ = new bi::MemberVariable($1, $3, empty_expr(@$), empty_expr(@$), $4, make_doc_loc(@$)); }
    | name ':' postfix_type brackets ';'            { push_raw(); $$ = new bi::MemberVariable($1, $3, $4, empty_expr(@$), empty_expr(@$), make_doc_loc(@$)); }
    | name ':' postfix_type brackets arguments ';'  { push_raw(); $$ = new bi::MemberVariable($1, $3, $4, $5, empty_expr(@$), make_doc_loc(@$)); }
    | name ':' postfix_type brackets value ';'      { push_raw(); $$ = new bi::MemberVariable($1, $3, $4, empty_expr(@$), $5, make_doc_loc(@$)); }
    ;

function_declaration
    : FUNCTION name parameters optional_result { push_raw(); } optional_braces  { $$ = new bi::Function($2, $3, $4, $6, make_doc_loc(@$)); }
    ;

fiber_declaration
    : optional_annotations FIBER name parameters optional_result { push_raw(); } optional_braces  { $$ = new bi::Fiber($1, $3, $4, $5, $7, make_doc_loc(@$)); }
    ;

program_declaration
    : PROGRAM name options { push_raw(); } optional_braces  { $$ = new bi::Program($2, $3, $5, make_doc_loc(@$)); }
    ;

member_function_declaration
    : FUNCTION name parameters optional_result { push_raw(); } optional_braces  { $$ = new bi::MemberFunction($2, $3, $4, $6, make_doc_loc(@$)); }
    ;

member_fiber_declaration
    : optional_annotations FIBER name parameters optional_result { push_raw(); } optional_braces  { $$ = new bi::MemberFiber($1, $3, $4, $5, $7, make_doc_loc(@$)); }
    ;
    
binary_operator
    : '*'     { $$ = new bi::Name('*'); }
    | '/'     { $$ = new bi::Name('/'); }
    | '+'     { $$ = new bi::Name('+'); }
    | '-'     { $$ = new bi::Name('-'); }
    | '<'     { $$ = new bi::Name('<'); }  // handle specially
    | '>'     { $$ = new bi::Name('>'); }
    | LE_OP   { $$ = new bi::Name("<="); }
    | GE_OP   { $$ = new bi::Name(">="); }
    | EQ_OP   { $$ = new bi::Name("=="); }
    | NE_OP   { $$ = new bi::Name("!="); }
    | AND_OP  { $$ = new bi::Name("&&"); }
    | OR_OP   { $$ = new bi::Name("||"); }
    ;    

unary_operator
    : '+'     { $$ = new bi::Name('+'); }
    | '-'     { $$ = new bi::Name('-'); }
    | '!'     { $$ = new bi::Name('!'); }
    ;    

binary_operator_declaration
    : OPERATOR '(' parameter binary_operator parameter ')' optional_result { push_raw(); } optional_braces  { $$ = new bi::BinaryOperator($4, new bi::Binary($3, $5, make_loc(@$)), $7, $9, make_doc_loc(@$)); }
    ;
    
unary_operator_declaration
    : OPERATOR '(' unary_operator parameter ')' optional_result { push_raw(); } optional_braces            { $$ = new bi::UnaryOperator($3, $4, $6, $8, make_doc_loc(@$)); }
    ;
    
assignment_operator
    : LEFT_OP         { $$ = new bi::Name("<-"); }
    | LEFT_TILDE_OP   { $$ = new bi::Name("<~"); }
    | RIGHT_TILDE_OP  { $$ = new bi::Name("~>"); }
    | '~'             { $$ = new bi::Name("~"); }
    ;

assignment_operator_declaration
    : OPERATOR LEFT_OP parameter { push_raw(); } optional_braces  { $$ = new bi::AssignmentOperator(new bi::Name("<-"), $3, $5, make_doc_loc(@$)); }
    ;

conversion_operator_declaration
    : OPERATOR result { push_raw(); } optional_braces  { $$ = new bi::ConversionOperator($2, $4, make_doc_loc(@$)); }
    ;

class_declaration
    : CLASS name optional_generics optional_member_parameters '<' primary_type optional_arguments { push_raw(); } optional_class_braces  { $$ = new bi::Class($2, $3, $4, $6, $7, $9, make_doc_loc(@$)); }
    | CLASS name optional_generics optional_member_parameters { push_raw(); } optional_class_braces                                         { $$ = new bi::Class($2, $3, $4, empty_type(@$), empty_expr(@$), $6, make_doc_loc(@$)); }
    ;

alias_declaration
    : TYPE name '=' type ';'  { push_raw(); $$ = new bi::Alias($2, $4, make_doc_loc(@$)); }
    ;
    
basic_declaration
    : TYPE name '<' type_identifier ';'  { push_raw(); $$ = new bi::Basic($2, $4, make_doc_loc(@$)); }
    | TYPE name ';'                      { push_raw(); $$ = new bi::Basic($2, empty_type(@$), make_doc_loc(@$)); }
    ;

cpp
    : CPP double_braces  { push_raw(); $$ = new bi::Raw(new bi::Name("cpp"), pop_raw(), make_loc(@$)); }
    ;

hpp
    : HPP double_braces  { push_raw(); $$ = new bi::Raw(new bi::Name("hpp"), pop_raw(), make_loc(@$)); }
    ;

assignment
    : expression assignment_operator expression ';'  { $$ = new bi::Assignment($1, $2, $3, make_loc(@$)); }
    ;

expression_statement
    : expression ';'  { $$ = new bi::ExpressionStatement($1, make_loc(@$)); }
    ;

if
    : IF parens_expression braces ELSE braces  { $$ = new bi::If($2, $3, $5, make_loc(@$)); }
    | IF parens_expression braces ELSE if      { $$ = new bi::If($2, $3, $5, make_loc(@$)); }
    | IF parens_expression braces              { $$ = new bi::If($2, $3, new bi::EmptyStatement(), make_loc(@$)); }
    ;

for_index
    : identifier
    | name ':' type  { $$ = new bi::LocalVariable($1, $3, empty_expr(@$), empty_expr(@$), empty_expr(@$), make_loc(@$)); }
    ;

for
    : FOR '(' for_index IN expression RANGE_OP expression ')' braces  { $$ = new bi::For($3, $5, $7, $9, make_loc(@$)); }
    ;

while
    : WHILE parens_expression braces  { $$ = new bi::While($2, $3, make_loc(@$)); }
    ;

do_while
    : DO braces WHILE parens_expression ';'  { $$ = new bi::DoWhile($2, $4, make_loc(@$)); }
    ;

assertion
    : ASSERT expression ';'  { $$ = new bi::Assert($2, make_loc(@$)); }
    ;

return
    : RETURN optional_expression ';'  { $$ = new bi::Return($2, make_loc(@$)); }
    ;

yield
    : YIELD expression ';'  { $$ = new bi::Yield($2, make_loc(@$)); }
    ;

statement
    : local_variable_declaration
    | expression_statement
    | assignment
    | if
    | for
    | while
    | do_while
    | assertion
    | return
    | yield
    | cpp
    ;

statements
    : statement
    | statement statements  { $$ = new bi::StatementList($1, $2, make_loc(@$)); }
    ;

optional_statements
    : statements
    |             { $$ = new bi::EmptyStatement(); }
    ;

class_statement
    : member_variable_declaration
    | member_function_declaration
    | member_fiber_declaration
    | assignment_operator_declaration
    | conversion_operator_declaration
    | hpp
    ;
    
class_statements
    : class_statement
    | class_statement class_statements  { $$ = new bi::StatementList($1, $2, make_loc(@$)); }
    ;
    
optional_class_statements
    : class_statements
    |                   { $$ = new bi::EmptyStatement(); }
    ;
    
file_statement
    : global_variable_declaration
    | function_declaration
    | fiber_declaration
    | program_declaration
    | binary_operator_declaration
    | unary_operator_declaration
    | class_declaration
    | alias_declaration
    | basic_declaration
    | cpp
    | hpp
    ;

file_statements
    : file_statement
    | file_statement file_statements  { $$ = new bi::StatementList($1, $2, make_loc(@$)); }
    ;

optional_file_statements
    : file_statements
    |                  { $$ = new bi::EmptyStatement(); }
    ;
    
file
    : optional_file_statements  { compiler->setRoot($1); }
    ;

result
    : RIGHT_OP type  { $$ = $2; }
    ;
    
optional_result
    : result
    |         { $$ = empty_type(@$); }
    ;

value
    : LEFT_OP expression  { $$ = $2; }
    ;
    
optional_value
    : value
    |        { $$ = empty_expr(@$); }
    ;

braces
    : '{' optional_statements '}'  { $$ = new bi::Braces($2, make_loc(@$)); }
    ;

optional_braces
    : braces
    | ';'     { $$ = new bi::EmptyStatement(); }
    ;

class_braces
    : '{' optional_class_statements '}'  { $$ = new bi::Braces($2, make_loc(@$)); }
    ;

optional_class_braces
    : class_braces
    | ';'           { $$ = new bi::EmptyStatement(); }
    ;
    
double_braces
    : DOUBLE_BRACE_OPEN DOUBLE_BRACE_CLOSE
    ;


/***************************************************************************
 * Types                                                                   *
 ***************************************************************************/

type_identifier
    : name                    { $$ = new bi::TypeIdentifier($1, make_loc(@$)); }
    ;

class_type
    : name '<' type_list '>'  { $$ = new bi::ClassType($1, $3, make_loc(@$)); }
    ;

primary_type
    : type_identifier
    | class_type
    ;

tuple_type
    : '(' type_list ')'  { $$ = new bi::TupleType($2, make_loc(@$)); }
    ;

sequence_type
    : '[' type_list ']'  { $$ = new bi::SequenceType($2, make_loc(@$)); }
    ;

postfix_type
    : primary_type
    | tuple_type
    | sequence_type
    | postfix_type '!'  { $$ = new bi::FiberType($1, make_loc(@$)); }
    | postfix_type '?'  { $$ = new bi::OptionalType($1, make_loc(@$)); }
    ;

array_type
    : postfix_type
    | postfix_type '[' size ']'  { $$ = new bi::ArrayType($1, $3, make_loc(@$)); }
    ;

function_type
    : array_type
    | '@' parameter_types optional_result  { $$ = new bi::FunctionType($2, $3, make_loc(@$)); }
    ;

type
    : function_type
    ;

type_list
    : type
    | type ',' type_list  { $$ = new bi::TypeList($1, $3, make_loc(@$)); }
    ;

parameter_type_list
    : type
    | type ',' parameter_type_list  { $$ = new bi::TypeList($1, $3, make_loc(@$)); }
    ;

parameter_types
    : '(' ')'                      { $$ = empty_type(@$); }
    | '(' parameter_type_list ')'  { $$ = $2; }
    ;

%%
