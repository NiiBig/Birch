%code requires {
  #include "lexer.hpp"
  #include "build/Compiler.hpp"

  extern bi::Compiler* compiler;
  extern char *yytext;
}

%code {
  #include "expression/all.hpp"
  #include "statement/all.hpp"
  #include "type/all.hpp"

  #include <sstream>

  std::stringstream raw;
  
  void setloc(bi::Located* o, YYLTYPE& loc) {
    o->loc->file = compiler->file;
    o->loc->firstLine = loc.first_line;
    o->loc->lastLine = loc.last_line;
    o->loc->firstCol = loc.first_column;
    o->loc->lastCol = loc.last_column;
  }

  bi::Location* make_loc(YYLTYPE& loc) {
    return new bi::Location(compiler->file, loc.first_line, loc.last_line,
        loc.first_column, loc.last_column);
  }
}

%union {
  bool valBool;
  int32_t valInt;
  double valReal;
  const char* valString;

  bi::Name* valName;
  bi::Path* valPath;
  bi::Expression* valExpression;
  bi::Type* valType;
  bi::Statement* valStatement;
}

%token <valString> IMPORT PROGRAM CLASS TYPE FUNCTION COROUTINE OPERATOR
%token <valString> IF ELSE FOR IN WHILE ASSERT RETURN CPP HPP THIS SUPER
%token <valString> FUNCTION_UPPER COROUTINE_UPPER
%token <valString> DOUBLE_BRACE_OPEN DOUBLE_BRACE_CLOSE RAW NAME
%token <valBool> BOOL_LITERAL
%token <valInt> INT_LITERAL
%token <valReal> REAL_LITERAL
%token <valString> STRING_LITERAL
%token <valString> LEFT_OP RIGHT_OP LEFT_TILDE_OP RIGHT_TILDE_OP
%token <valString> AND_OP OR_OP LE_OP GE_OP EQ_OP NE_OP RANGE_OP

%type <valName> name
%type <valPath> path
%type <valName> unary_operator binary_operator assignment_operator
%type <valName> multiplicative_operator additive_operator relational_operator
%type <valName> equality_operator logical_and_operator logical_or_operator
%type <valName> stochastic_operator 

%type <valExpression> bool_literal int_literal real_literal string_literal
%type <valExpression> literal identifier
%type <valExpression> this_expression super_expression
%type <valExpression> parens_expression function_expression
%type <valExpression> member_expression primary_expression
%type <valExpression> index_expression index_list
%type <valExpression> brackets_expression unary_expression
%type <valExpression> multiplicative_expression additive_expression
%type <valExpression> relational_expression equality_expression
%type <valExpression> logical_and_expression logical_or_expression
%type <valExpression> stochastic_expression expression_list expression
%type <valExpression> parameter parameter_list parameters
%type <valExpression> member_parameter member_parameter_list member_parameters
%type <valExpression> optional_member_parameters
%type <valExpression> arguments optional_arguments
%type <valExpression> size_list size value optional_value

%type <valStatement> global_variable_declaration local_variable_declaration
%type <valStatement> function_declaration coroutine_declaration program_declaration
%type <valStatement> member_variable_declaration member_function_declaration
%type <valStatement> binary_operator_declaration unary_operator_declaration
%type <valStatement> conversion_operator_declaration assignment_operator_declaration
%type <valStatement> class_declaration alias_type_declaration basic_type_declaration
%type <valStatement> import cpp hpp assignment expression_statement if for
%type <valStatement> while assertion return
%type <valStatement> statement statements optional_statements
%type <valStatement> class_statement class_statements optional_class_statements
%type <valStatement> file_statement file_statements optional_file_statements
%type <valStatement> braces optional_braces
%type <valStatement> class_braces optional_class_braces

%type <valType> identifier_type primary_type parens_type function_type
%type <valType> coroutine_type array_type type_list type
%type <valType> type_parameter_list type_parameters
%type <valType> result optional_result

%locations

%start file
%%


/***************************************************************************
 * Names and paths                                                         *
 ***************************************************************************/

name
    : NAME  { $$ = new bi::Name($1, make_loc(@$)); }
    ;

path
    : name           { $$ = new bi::Path($1, nullptr, make_loc(@$)); }
    | name '.' path  { $$ = new bi::Path($1, $3, make_loc(@$)); }
    ;


/***************************************************************************
 * Expressions                                                             *
 ***************************************************************************/

bool_literal
    : BOOL_LITERAL  { $$ = new bi::Literal<bool>($1, yytext, new bi::BasicType(new bi::Name("Boolean")), make_loc(@$)); }
    ;

int_literal
    : INT_LITERAL  { $$ = new bi::Literal<int64_t>($1, yytext, new bi::AliasType(new bi::Name("Integer")), make_loc(@$)); }
    ;

real_literal
    : REAL_LITERAL  { $$ = new bi::Literal<double>($1, yytext, new bi::AliasType(new bi::Name("Real")), make_loc(@$)); }
    ;

string_literal
    : STRING_LITERAL  { $$ = new bi::Literal<const char*>($1, yytext, new bi::BasicType(new bi::Name("String")), make_loc(@$)); }
    ;

literal
    : bool_literal
    | int_literal
    | real_literal
    | string_literal
    ;

identifier
    : name optional_arguments  { $$ = new bi::Identifier<bi::Unknown>($1, $2, make_loc(@$)); }
    ;

parens_expression
    : '(' expression_list ')'  { $$ = new bi::ParenthesesExpression($2, make_loc(@$)); }
    ;
    
function_expression
    : FUNCTION parameters optional_result optional_braces  { $$ = new bi::LambdaFunction($2, $3, $4, make_loc(@$)); }
    ;

this_expression
    : THIS  { $$ = new bi::This(make_loc(@$)); }
    ;

super_expression
    : SUPER  { $$ = new bi::Super(make_loc(@$)); }
    ;

primary_expression
    : literal
    | identifier
    | this_expression
    | super_expression
    | function_expression
    | parens_expression
    ;

index_expression
    : expression RANGE_OP expression  { $$ = new bi::Range($1, $3, make_loc(@$)); }
    | expression                      { $$ = new bi::Index($1, make_loc(@$)); }
    ;
    
index_list
    : index_expression
    | index_expression ',' index_list  { $$ = new bi::List<bi::Expression>($1, $3, make_loc(@$)); }
    ;

brackets_expression
    : primary_expression
    | primary_expression '[' index_list ']'  { $$ = new bi::BracketsExpression($1, $3, make_loc(@$)); }
    ;

member_operator
    : '.'
    ;

member_expression
    : brackets_expression
    | member_expression member_operator brackets_expression  { $$ = new bi::Member($1, $3, make_loc(@$)); }
    ;

unary_operator
    : '+'  { $$ = new bi::Name("+", make_loc(@$)); }
    | '-'  { $$ = new bi::Name("-", make_loc(@$)); }
    | '!'  { $$ = new bi::Name("!", make_loc(@$)); }
    ;

unary_expression
    : member_expression
    | unary_operator member_expression  { $$ = new bi::Identifier<bi::UnaryOperator>($1, $2, make_loc(@$)); }
    ;

multiplicative_operator
    : '*'  { $$ = new bi::Name("*", make_loc(@$)); }
    | '/'  { $$ = new bi::Name("/", make_loc(@$)); }
    ;

multiplicative_expression
    : unary_expression
    | multiplicative_expression multiplicative_operator unary_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

additive_operator
    : '+'  { $$ = new bi::Name("+", make_loc(@$)); }
    | '-'  { $$ = new bi::Name("-", make_loc(@$)); }
    ;

additive_expression
    : multiplicative_expression
    | additive_expression additive_operator multiplicative_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

relational_operator
    : '<'    { $$ = new bi::Name("<", make_loc(@$)); }
    | '>'    { $$ = new bi::Name(">", make_loc(@$)); }
    | LE_OP  { $$ = new bi::Name("<=", make_loc(@$)); }
    | GE_OP  { $$ = new bi::Name(">=", make_loc(@$)); }
    ;
    
relational_expression
    : additive_expression
    | relational_expression relational_operator additive_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

equality_operator
    : EQ_OP  { $$ = new bi::Name("==", make_loc(@$)); }
    | NE_OP  { $$ = new bi::Name("!=", make_loc(@$)); }
    ;

equality_expression
    : relational_expression
    | equality_expression equality_operator relational_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

logical_and_operator
    : AND_OP  { $$ = new bi::Name("&&", make_loc(@$)); }
    ;

logical_and_expression
    : equality_expression
    | logical_and_expression logical_and_operator equality_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

logical_or_operator
    : OR_OP  { $$ = new bi::Name("||", make_loc(@$)); }
    ;

logical_or_expression
    : logical_and_expression
    | logical_or_expression logical_or_operator logical_and_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

stochastic_operator
    : RIGHT_TILDE_OP  { $$ = new bi::Name("~>", make_loc(@$)); }
    ;

stochastic_expression
    : logical_or_expression
    | stochastic_expression stochastic_operator logical_or_expression  { $$ = new bi::Identifier<bi::BinaryOperator>($1, $2, $3, make_loc(@$)); }
    ;

expression_list
    : stochastic_expression
    | stochastic_expression ',' expression_list  { $$ = new bi::List<bi::Expression>($1, $3, make_loc(@$)); }
    ;

expression
    : stochastic_expression
    ;

binary_operator
    : multiplicative_operator
    | additive_operator
    | relational_operator
    | equality_operator
    | logical_and_operator
    | logical_or_operator
    | stochastic_operator
    ;

assignment_operator
    : LEFT_OP        { $$ = new bi::Name("<-", make_loc(@$)); }
    | LEFT_TILDE_OP  { $$ = new bi::Name("<~", make_loc(@$)); }
    | '~'            { $$ = new bi::Name("~", make_loc(@$)); }
    ;

parameters
    : '(' ')'                 { $$ = new bi::EmptyExpression(); }
    | '(' parameter_list ')'  { $$ = $2; }
    ;

parameter_list
    : parameter
    | parameter ',' parameter_list  { $$ = new bi::List<bi::Expression>($1, $3, make_loc(@$)); }
    ;

parameter
    : name ':' type  { $$ = new bi::Parameter($1, $3, new bi::EmptyExpression(), make_loc(@$)); }
    ;

member_parameters
    : '(' ')'                        { $$ = new bi::EmptyExpression(); }
    | '(' member_parameter_list ')'  { $$ = $2; }
    ;

optional_member_parameters
    : member_parameters
    |                    { $$ = new bi::EmptyExpression(); }
    ;

member_parameter_list
    : member_parameter
    | member_parameter ',' member_parameter_list  { $$ = new bi::List<bi::Expression>($1, $3, make_loc(@$)); }
    ;

member_parameter
    : name ':' type  { $$ = new bi::MemberParameter($1, $3, new bi::EmptyExpression(), make_loc(@$)); }
    ;

arguments
    : '(' ')'                  { $$ = new bi::EmptyExpression(); }
    | '(' expression_list ')'  { $$ = $2; }
    ;

optional_arguments
    : arguments
    |            { $$ = new bi::EmptyExpression(); }
    ;

size
    : expression  { $$ = new bi::Span($1, make_loc(@$)); }
    | '_'         { $$ = new bi::Span(new bi::EmptyExpression(), make_loc(@$)); }
    ;

size_list
    : size
    | size ',' size_list  { $$ = new bi::List<bi::Expression>($1, $3, make_loc(@$)); }
    ;


/***************************************************************************
 * Statements                                                              *
 ***************************************************************************/

global_variable_declaration
    : name ':' type optional_arguments optional_value ';'  { $$ = new bi::GlobalVariable($1, $3, $4, $5, make_loc(@$)); }
    ;

local_variable_declaration
    : name ':' type optional_arguments optional_value ';'  { $$ = new bi::LocalVariable($1, $3, $4, $5, make_loc(@$)); }
    ;

member_variable_declaration
    : name ':' type ';'  { $$ = new bi::MemberVariable($1, $3, make_loc(@$)); }
    ;

function_declaration
    : FUNCTION name parameters optional_result optional_braces  { $$ = new bi::Function($2, $3, $4, $5, make_loc(@$)); }
    ;

coroutine_declaration
    : COROUTINE name parameters optional_result optional_braces  { $$ = new bi::Coroutine($2, $3, $4, $5, make_loc(@$)); }
    ;

program_declaration
    : PROGRAM name parameters optional_braces  { $$ = new bi::Program($2, $3, $4, make_loc(@$)); }
    ;

member_function_declaration
    : FUNCTION name parameters optional_result optional_braces  { $$ = new bi::MemberFunction($2, $3, $4, $5, make_loc(@$)); }
    ;
    
binary_operator_declaration
    : OPERATOR parameter binary_operator parameter optional_result optional_braces  { $$ = new bi::BinaryOperator($2, $3, $4, $5, $6, make_loc(@$)); }
    ;

unary_operator_declaration
    : OPERATOR unary_operator parameter optional_result optional_braces  { $$ = new bi::UnaryOperator($2, $3, $4, $5, make_loc(@$)); }
    ;
    
assignment_operator_declaration
    : OPERATOR LEFT_OP parameter optional_braces  { $$ = new bi::AssignmentOperator(new bi::Name("<-"), $3, $4, make_loc(@$)); }
    ;

conversion_operator_declaration
    : OPERATOR result optional_braces  { $$ = new bi::ConversionOperator($2, $3, make_loc(@$)); }
    ;

class_declaration
    : CLASS name optional_member_parameters '<' identifier_type optional_arguments optional_class_braces  { $$ = new bi::Class($2, $3, $5, $6, $7, make_loc(@$)); }
    | CLASS name optional_member_parameters optional_class_braces                                         { $$ = new bi::Class($2, $3, new bi::EmptyType(), new bi::EmptyExpression(), $4, make_loc(@$)); }
    ;

alias_type_declaration
    : TYPE name '=' identifier_type ';'  { $$ = new bi::Alias($2, $4, make_loc(@$)); }
    ;
    
basic_type_declaration
    : TYPE name ';'  { $$ = new bi::Basic($2, make_loc(@$)); }
    ;

import
    : IMPORT path ';'  { $$ = new bi::Import($2, compiler->import($2), make_loc(@$)); }
    ;

cpp
    : CPP double_braces  { $$ = new bi::Raw(new bi::Name("cpp"), raw.str(), make_loc(@$)); }
    ;

hpp
    : HPP double_braces  { $$ = new bi::Raw(new bi::Name("hpp"), raw.str(), make_loc(@$)); }
    ;

assignment
    : stochastic_expression assignment_operator stochastic_expression ';'  { $$ = new bi::Assignment($1, $2, $3, make_loc(@$)); }
    ;

expression_statement
    : expression ';'  { $$ = new bi::ExpressionStatement($1, make_loc(@$)); }
    ;

if
    : IF '(' expression ')' braces ELSE braces  { $$ = new bi::If($3, $5, $7, make_loc(@$)); }
    | IF '(' expression ')' braces ELSE if      { $$ = new bi::If($3, $5, $7, make_loc(@$)); }
    | IF '(' expression ')' braces              { $$ = new bi::If($3, $5, new bi::EmptyStatement(), make_loc(@$)); }
    ;

for
    : FOR '(' identifier IN expression RANGE_OP expression ')' braces  { $$ = new bi::For($3, $5, $7, $9, make_loc(@$)); }
    ;

while
    : WHILE '(' expression ')' braces  { $$ = new bi::While($3, $5, make_loc(@$)); }
    ;

assertion
    : ASSERT expression ';'  { $$ = new bi::Assert($2, make_loc(@$)); }
    ;

return
    : RETURN expression ';'  { $$ = new bi::Return($2, make_loc(@$)); }
    ;

statement
    : local_variable_declaration
    | expression_statement
    | assignment
    | if
    | for
    | while
    | assertion
    | return
    | cpp
    ;

statements
    : statement
    | statement statements  { $$ = new bi::List<bi::Statement>($1, $2, make_loc(@$)); }
    ;

optional_statements
    : statements
    |             { $$ = new bi::EmptyStatement(); }
    ;

class_statement
    : member_variable_declaration
    | member_function_declaration
    | assignment_operator_declaration
    | conversion_operator_declaration
    | hpp
    ;
    
class_statements
    : class_statement
    | class_statement class_statements  { $$ = new bi::List<bi::Statement>($1, $2, make_loc(@$)); }
    ;
    
optional_class_statements
    : class_statements
    |                   { $$ = new bi::EmptyStatement(); }
    ;
    
file_statement
    : import
    | global_variable_declaration
    | function_declaration
    | coroutine_declaration
    | program_declaration
    | binary_operator_declaration
    | unary_operator_declaration
    | class_declaration
    | alias_type_declaration
    | basic_type_declaration
    | cpp
    | hpp
    ;

file_statements
    : file_statement
    | file_statement file_statements  { $$ = new bi::List<bi::Statement>($1, $2, make_loc(@$)); }
    ;

optional_file_statements
    : file_statements
    |                  { $$ = new bi::EmptyStatement(); }
    ;
    
file
    : optional_file_statements  { compiler->setRoot($1); }
    ;

result
    : RIGHT_OP type  { $$ = $2; }
    ;
    
optional_result
    : result
    |         { $$ = new bi::EmptyType(); }
    ;

value
    : LEFT_OP expression  { $$ = $2; }
    ;
    
optional_value
    : value
    |        { $$ = new bi::EmptyExpression(); }
    ;

braces
    : '{' optional_statements '}'  { $$ = $2; }
    ;

optional_braces
    : braces
    | ';'     { $$ = new bi::EmptyStatement(); }
    ;

class_braces
    : '{' optional_class_statements '}'  { $$ = $2; }
    ;

optional_class_braces
    : class_braces
    | ';'           { $$ = new bi::EmptyStatement(); }
    ;

raw
    : RAW      { raw << $1; }
    | raw RAW  { raw << $2; }
    ;
    
double_braces
    : DOUBLE_BRACE_OPEN { raw.str(""); } raw DOUBLE_BRACE_CLOSE
    ;


/***************************************************************************
 * Types                                                                   *
 ***************************************************************************/

identifier_type
    : name  { $$ = new bi::IdentifierType($1, make_loc(@$)); }
    ;

parens_type
    : '(' type_list ')'  { $$ = new bi::ParenthesesType($2, make_loc(@$)); }
    ;

function_type
    : FUNCTION_UPPER '<' type_parameters optional_result '>'  { $$ = new bi::FunctionType($3, $4, make_loc(@$)); }
    ;

coroutine_type
    : COROUTINE_UPPER '<' type '>'  { $$ = new bi::CoroutineType($3, make_loc(@$)); }
    ;

primary_type
    : identifier_type
    | parens_type
    | function_type
    | coroutine_type
    ;

array_type
    : primary_type
    | primary_type '[' size_list ']'  { $$ = new bi::ArrayType($1, $3, make_loc(@$)); }
    ;

type_list
    : array_type
    | array_type ',' type_list  { $$ = new bi::List<bi::Type>($1, $3, make_loc(@$)); }
    ;

type
    : array_type
    ;

type_parameter_list
    : type
    | type ',' type_parameter_list  { $$ = new bi::List<bi::Type>($1, $3, make_loc(@$)); }
    ;

type_parameters
    : '(' ')'                      { $$ = new bi::EmptyType(); }
    | '(' type_parameter_list ')'  { $$ = $2; }
    ;
    ;

%%
