%code requires {
  #include "lexer.hpp"
  #include "build/Compiler.hpp"

  extern bi::Compiler* compiler;
  extern char *yytext;
}

%code {
  #include "expression/all.hpp"
  #include "program/all.hpp"
  #include "statement/all.hpp"
  #include "type/all.hpp"

  #include <sstream>

  std::stringstream raw;
  
  void setloc(bi::Located* o, YYLTYPE& loc) {
    o->loc->file = compiler->file;
    o->loc->firstLine = loc.first_line;
    o->loc->lastLine = loc.last_line;
    o->loc->firstCol = loc.first_column;
    o->loc->lastCol = loc.last_column;
  }

  bi::Location* make_loc(YYLTYPE& loc) {
    return new bi::Location(compiler->file, loc.first_line, loc.last_line,
        loc.first_column, loc.last_column);
  }
  
  bi::Expression* make_empty() {
    return new bi::EmptyExpression();
  }
}

%union {
  bool valBool;
  int32_t valInt;
  double valReal;
  const char* valString;

  bi::Name* valName;
  bi::Path* valPath;
  bi::Prog* valProg;
  bi::Expression* valExpression;
  bi::Type* valType;
  bi::Statement* valStatement;
}

%token <valString> IMPORT PROG MODEL FUNC IF ELSE WHILE CPP HPP THIS
%token <valString> DOUBLE_BRACE_OPEN DOUBLE_BRACE_CLOSE RAW NAME
%token <valBool> BOOL_LITERAL
%token <valInt> INT_LITERAL
%token <valReal> REAL_LITERAL
%token <valString> STRING_LITERAL
%token <valString> LEFT_OP RIGHT_OP LEFT_TILDE_OP RIGHT_TILDE_OP
%token <valString> AND_OP OR_OP LE_OP GE_OP EQ_OP NE_OP RANGE_OP

%type <valName> unary_operator
%type <valName> multiplicative_operator additive_operator
%type <valName> relational_operator
%type <valName> equality_operator logical_and_operator logical_or_operator
%type <valName> assignment_operator binary_operator
%type <valName> name path_name
%type <valPath> path

%type <valExpression> bool_literal int_literal real_literal string_literal
%type <valExpression> literal
%type <valExpression> brackets braces optional_braces
%type <valExpression> model_braces optional_model_braces
%type <valExpression> parameter_list parameters optional_parameters
%type <valExpression> result result_list results optional_results
%type <valExpression> argument_list arguments optional_arguments
%type <valExpression> var_reference var_parameter var_parameter_with_value
%type <valExpression> func_reference func_parameter
%type <valProg> prog_parameter

%type <valType> model_reference model_parameter
%type <valType> brackets_type parens_type primary_type
%type <valType> assignable_type random_type lambda_type
%type <valType> list_type type

%type <valExpression> reference_expression this_expression
%type <valExpression> parens_expression lambda_expression
%type <valExpression> member_expression primary_expression
%type <valExpression> brackets_expression unary_expression
%type <valExpression> multiplicative_expression additive_expression
%type <valExpression> relational_expression
%type <valExpression> equality_expression logical_and_expression logical_or_expression
%type <valExpression> assignment_expression
%type <valExpression> expression index_expression index_list

%type <valStatement> var_declaration func_declaration
%type <valStatement> model_declaration prog_declaration
%type <valStatement> import cpp hpp expression_statement if while
%type <valStatement> statement statements optional_statements
%type <valStatement> model_statement model_statements optional_model_statements
%type <valStatement> file_statement file_statements optional_file_statements

%locations

%start file
%%


/***************************************************************************
 * Names and paths                                                         *
 ***************************************************************************/

name
    : NAME  { $$ = new bi::Name($1, make_loc(@$)); }
    ;

path_name
    : NAME    { $$ = new bi::Name($1, make_loc(@$)); }
    | FUNC    { $$ = new bi::Name("function", make_loc(@$)); }
    | MODEL   { $$ = new bi::Name("model", make_loc(@$)); }
    | PROG    { $$ = new bi::Name("program", make_loc(@$)); }
    ;

path
    : path_name           { $$ = new bi::Path($1, nullptr, make_loc(@$)); }
    | path_name '.' path  { $$ = new bi::Path($1, $3, make_loc(@$)); }
    ;


/***************************************************************************
 * Literals                                                                *
 ***************************************************************************/

bool_literal
    : BOOL_LITERAL  { $$ = new bi::BooleanLiteral($1, yytext, new bi::ModelReference(new bi::Name("Boolean")), make_loc(@$)); }
    ;

int_literal
    : INT_LITERAL  { $$ = new bi::IntegerLiteral($1, yytext, new bi::ModelReference(new bi::Name("Integer")), make_loc(@$)); }
    ;

real_literal
    : REAL_LITERAL  { $$ = new bi::RealLiteral($1, yytext, new bi::ModelReference(new bi::Name("Real")), make_loc(@$)); }
    ;

string_literal
    : STRING_LITERAL  { $$ = new bi::StringLiteral($1, yytext, new bi::ModelReference(new bi::Name("String")), make_loc(@$)); }
    ;

literal
    : bool_literal
    | int_literal
    | real_literal
    | string_literal
    ;
    

/***************************************************************************
 * Groupings                                                               *
 ***************************************************************************/

brackets
    : '[' arguments ']'  { $$ = $2; }
    ;

braces
    : '{' optional_statements '}'  { $$ = new bi::BracesExpression($2, make_loc(@$)); }
    ;

optional_braces
    : braces
    | ';'     { $$ = make_empty(); }
    ;

model_braces
    : '{' optional_model_statements '}'  { $$ = new bi::BracesExpression($2, make_loc(@$)); }
    ;

optional_model_braces
    : model_braces
    | ';'           { $$ = make_empty(); }
    ;


/***************************************************************************
 * Raw code                                                                *
 ***************************************************************************/

raw
    : RAW      { raw << $1; }
    | raw RAW  { raw << $2; }
    ;
    
double_braces
    : DOUBLE_BRACE_OPEN { raw.str(""); } raw DOUBLE_BRACE_CLOSE
    ;


/***************************************************************************
 * Parameters                                                              *
 ***************************************************************************/

var_parameter
    : name ':' type  { $$ = new bi::VarParameter($1, $3, make_empty(), make_loc(@$)); }
    | ':' type       { $$ = new bi::VarParameter(new bi::Name(), $2, make_empty(), make_loc(@$)); }
    ;
    
var_parameter_with_value
    : var_parameter
    | name ':' type LEFT_OP expression  { $$ = new bi::VarParameter($1, $3, $5, make_loc(@$)); }
    ;
    
func_parameter
    : name parameters optional_results optional_braces                                      { $$ = new bi::FuncParameter($1, $2, $3, $4, bi::FUNCTION, make_loc(@$)); }
    | '(' unary_operator var_parameter ')' optional_results optional_braces                 { $$ = new bi::FuncParameter($2, $3, $5, $6, bi::UNARY, make_loc(@$)); }
    | '(' var_parameter binary_operator var_parameter ')' optional_results optional_braces  { $$ = new bi::FuncParameter($2, $3, $4, $6, $7, bi::BINARY, make_loc(@$)); }
    ;

model_parameter
    : name optional_parameters '<' model_reference optional_model_braces  { $$ = new bi::ModelParameter($1, $2, new bi::Name("<"), $4, $5, make_loc(@$)); }
    | name optional_parameters optional_model_braces                      { $$ = new bi::ModelParameter($1, $2, new bi::Name(), new bi::EmptyType(), $3, make_loc(@$)); }
    | name '=' model_reference ';'                                        { $$ = new bi::ModelParameter($1, make_empty(), new bi::Name("="), $3, make_empty(), make_loc(@$)); }
    ;

prog_parameter
    : name parameters optional_braces  { $$ = new bi::ProgParameter($1, $2, $3, make_loc(@$)); }
    ;

parameter_list
    : var_parameter_with_value
    | parameter_list ',' var_parameter_with_value  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

parameters
    : '(' ')'                 { $$ = make_empty(); }
    | '(' parameter_list ')'  { $$ = $2; }
    ;

optional_parameters
    : parameters
    |             { $$ = make_empty(); }
    ;

result
    : var_parameter
    ;

result_list
    : result
    | result_list ',' result  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

results
    : result
    | '(' result_list ')'  { $$ = $2; }
    ;

optional_results
    : RIGHT_OP results  { $$ = $2; }
    |                   { $$ = make_empty(); }
    ;


/***************************************************************************
 * References                                                              *
 ***************************************************************************/

var_reference
    : name  { $$ = new bi::VarReference($1, make_loc(@$)); }
    ;

func_reference
    : name arguments  { $$ = new bi::FuncReference($1, $2, bi::FUNCTION, make_loc(@$)); }
    ;

model_reference
    : name optional_arguments  { $$ = new bi::ModelReference($1, $2, make_loc(@$)); }
    ;

argument_list
    : expression
    | expression ',' argument_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;
    
arguments
    : '(' ')'                { $$ = make_empty(); }
    | '(' argument_list ')'  { $$ = $2; }
    ;

optional_arguments
    : arguments
    |            { $$ = make_empty(); }
    ;


/***************************************************************************
 * Types                                                                   *
 ***************************************************************************/

parens_type
    : '(' list_type ')'  { $$ = new bi::ParenthesesType($2, make_loc(@$)); }
    ;

primary_type
    : model_reference
    | parens_type
    ;

brackets_type
    : primary_type
    | primary_type brackets  { $$ = new bi::BracketsType($1, $2, make_loc(@$)); }
    ;

lambda_type
    : brackets_type
    | parens_type RIGHT_OP brackets_type  { $$ = new bi::LambdaType($1, $3, make_loc(@$)); }
    ;

assignable_type
    : lambda_type
    | lambda_type '!'  { $$ = new bi::AssignableType($1, make_loc(@$)); }
    ;

random_type
    : assignable_type
    | assignable_type '~' assignable_type  { $$ = new bi::RandomType($1, $3, make_loc(@$)); }
    ;

list_type
    : random_type
    //| random_type ',' list_type  { $$ = new bi::TypeList($1, $3, make_loc(@$)); }
    ;

type
    : assignable_type
    ;


/***************************************************************************
 * Expressions                                                             *
 ***************************************************************************/

reference_expression
    : var_reference
    | func_reference
    ;

parens_expression
    : '(' expression ')'  { $$ = new bi::ParenthesesExpression($2, make_loc(@$)); }
    ;
    
lambda_expression
    : parameters optional_results optional_braces  { $$ = new bi::FuncParameter(new bi::Name(), $1, $2, $3, bi::LAMBDA, make_loc(@$)); }
    ;

this_expression
    : THIS  { $$ = new bi::This(make_loc(@$)); }
    ;

primary_expression
    : literal
    | parens_expression
    | lambda_expression
    | reference_expression
    | this_expression
    ;

index_expression
    : assignment_expression RANGE_OP assignment_expression  { $$ = new bi::Range($1, $3, make_loc(@$)); }
    | assignment_expression                                 { $$ = new bi::Index($1, make_loc(@$)); }
    ;
    
index_list
    : index_expression
    | index_expression ',' index_list  { $$ = new bi::ExpressionList($1, $3, make_loc(@$)); }
    ;

brackets_expression
    : primary_expression
    | primary_expression '[' index_list ']'  { $$ = new bi::BracketsExpression($1, $3, make_loc(@$)); }
    ;

member_operator
    : '.'
    ;

member_expression
    : brackets_expression
    | member_expression member_operator brackets_expression  { $$ = new bi::Member($1, $3, make_loc(@$)); }
    ;

unary_operator
    : '+'  { $$ = new bi::Name("+", make_loc(@$)); }
    | '-'  { $$ = new bi::Name("-", make_loc(@$)); }
    | '!'  { $$ = new bi::Name("!", make_loc(@$)); }
    ;

unary_expression
    : member_expression
    | unary_operator member_expression  { $$ = new bi::FuncReference($1, $2, bi::UNARY, make_loc(@$)); }
    ;
    
multiplicative_operator
    : '*'  { $$ = new bi::Name("*", make_loc(@$)); }
    | '/'  { $$ = new bi::Name("/", make_loc(@$)); }
    ;

multiplicative_expression
    : unary_expression
    | multiplicative_expression multiplicative_operator unary_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::BINARY, make_loc(@$)); }
    ;

additive_operator
    : '+'  { $$ = new bi::Name("+", make_loc(@$)); }
    | '-'  { $$ = new bi::Name("-", make_loc(@$)); }
    ;

additive_expression
    : multiplicative_expression
    | additive_expression additive_operator multiplicative_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::BINARY, make_loc(@$)); }
    ;

relational_operator
    : '<'    { $$ = new bi::Name("<", make_loc(@$)); }
    | '>'    { $$ = new bi::Name(">", make_loc(@$)); }
    | LE_OP  { $$ = new bi::Name("<=", make_loc(@$)); }
    | GE_OP  { $$ = new bi::Name(">=", make_loc(@$)); }
    ;
    
relational_expression
    : additive_expression
    | relational_expression relational_operator additive_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::BINARY, make_loc(@$)); }
    ;

equality_operator
    : EQ_OP  { $$ = new bi::Name("==", make_loc(@$)); }
    | NE_OP  { $$ = new bi::Name("!=", make_loc(@$)); }
    ;

equality_expression
    : relational_expression
    | equality_expression equality_operator relational_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::BINARY, make_loc(@$)); }
    ;

logical_and_operator
    : AND_OP  { $$ = new bi::Name("&&", make_loc(@$)); }
    ;

logical_and_expression
    : equality_expression
    | logical_and_expression logical_and_operator equality_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::BINARY, make_loc(@$)); }
    ;

logical_or_operator
    : OR_OP  { $$ = new bi::Name("||", make_loc(@$)); }
    ;

logical_or_expression
    : logical_and_expression
    | logical_or_expression logical_or_operator logical_and_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::BINARY, make_loc(@$)); }
    ;

assignment_operator
    : LEFT_OP         { $$ = new bi::Name("<-", make_loc(@$)); }
    | LEFT_TILDE_OP   { $$ = new bi::Name("<~", make_loc(@$)); }
    | RIGHT_TILDE_OP  { $$ = new bi::Name("~>", make_loc(@$)); }
    | '~'             { $$ = new bi::Name("~", make_loc(@$)); }
    ;
    
assignment_expression
    : logical_or_expression
    | logical_or_expression assignment_operator assignment_expression  { $$ = new bi::FuncReference($1, $2, $3, bi::ASSIGN, make_loc(@$)); }
    ;

expression
    : assignment_expression
    ;

binary_operator
    : multiplicative_operator
    | additive_operator
    | relational_operator
    | equality_operator
    | logical_and_operator
    | logical_or_operator
    | assignment_operator
    ;


/***************************************************************************
 * Statements                                                              *
 ***************************************************************************/

var_declaration
    : var_parameter_with_value ';'  { $$ = new bi::VarDeclaration(dynamic_cast<bi::VarParameter*>($1), make_loc(@$)); }
    ;

func_declaration
    : FUNC func_parameter  { $$ = new bi::FuncDeclaration(dynamic_cast<bi::FuncParameter*>($2), make_loc(@$)); }
    ;
    
model_declaration
    : MODEL model_parameter  { $$ = new bi::ModelDeclaration(dynamic_cast<bi::ModelParameter*>($2), make_loc(@$)); } 
    ;
    
prog_declaration
    : PROG prog_parameter  { $$ = new bi::ProgDeclaration(dynamic_cast<bi::ProgParameter*>($2), make_loc(@$)); } 
    ;

expression_statement
    : expression ';'  { $$ = new bi::ExpressionStatement($1, make_loc(@$)); }
    ;

if
    : IF '(' expression ')' braces ELSE braces  { $$ = new bi::Conditional($3, $5, $7, make_loc(@$)); }
    | IF '(' expression ')' braces ELSE if      { $$ = new bi::Conditional($3, $5, new bi::BracesExpression($7), make_loc(@$)); }
    | IF '(' expression ')' braces              { $$ = new bi::Conditional($3, $5, make_empty(), make_loc(@$)); }
    ;

while
    : WHILE '(' expression ')' braces  { $$ = new bi::Loop($3, $5, make_loc(@$)); }
    ;

cpp
    : CPP double_braces  { $$ = new bi::Raw(new bi::Name("cpp"), raw.str(), make_loc(@$)); }
    ;

hpp
    : HPP double_braces  { $$ = new bi::Raw(new bi::Name("hpp"), raw.str(), make_loc(@$)); }
    ;

statement
    : expression_statement
    | var_declaration
    | if
    | while
    | cpp
    | hpp
    ;

statements
    : statement
    | statement statements  { $$ = new bi::StatementList($1, $2, make_loc(@$)); }
    ;

optional_statements
    : statements
    |             { $$ = new bi::EmptyStatement(); }
    ;

model_statement
    : var_declaration
    | func_declaration ///@todo Don't allow operators to be declared in models
    | hpp
    ;
    
model_statements
    : model_statement
    | model_statement model_statements  { $$ = new bi::StatementList($1, $2, make_loc(@$)); }
    ;
    
optional_model_statements
    : model_statements
    |                   { $$ = new bi::EmptyStatement(); }
    ;

import
    : IMPORT path ';'  { $$ = new bi::Import($2, compiler->import($2), make_loc(@$)); }
    ;
    
file_statement
    : import
    | cpp
    | hpp
    | var_declaration
    | func_declaration
    | prog_declaration
    | model_declaration
    ;

file_statements
    : file_statement
    | file_statement file_statements  { $$ = new bi::StatementList($1, $2, make_loc(@$)); }
    ;

optional_file_statements
    : file_statements
    |                  { $$ = new bi::EmptyStatement(); }
    ;
    
file
    : optional_file_statements  { compiler->setRoot($1); }
    ;
    
%%
