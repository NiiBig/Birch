/**
 * @file
 *
 * Standard headers that should be included for all C++ files generated by
 * the compiler.
 */
#pragma once

#include "bi/lib/easy.hpp"
#include "bi/lib/Pointer.hpp"
#include "bi/lib/Coroutine.hpp"

#include <utility>
#include <functional>
#include <string>
#include <cstdlib>
#include <cassert>

#include <getopt.h>
#include <gc.h>

#define BI_NEW(Type) new (GC_MALLOC(sizeof(Type))) Type

/**
 * Left tilde (`<~`) operator
 */
template<class Left, class Right>
void left_tilde_(Left& left, const Right& right) {
  left = right->simulate();
}

/**
 * Right tilde (`~>`) operator
 */
template<class Left, class Right>
auto right_tilde_(const Left& left, const Right& right) {
  return right->observe(left);
}

/**
 * Tilde (`~`) operator
 */
template<class Left, class Right>
auto tilde_(Left& left, const Right& right) {
  assert(left->isUninitialized());
  if (left->isMissing()) {
    right_tilde_(left->value(), right);
  }
  left = right;
}
