/**
 * Buffer in memory.
 */
final class Buffer {
  /**
   * Value contained in this buffer.
   */
  value:Value <- ObjectValue();

  /**
   * Get a child.
   */
  function getChild(name:String) -> Buffer? {
    return value.getChild(name);
  }

  /**
   * Set child.
   */
  function setChild(name:String) -> Buffer {
    return value.setChild(name);
  }

  /**
   * Push a new element onto the end of an array.
   */
  function push() -> Buffer {
    return value.push();
  }

  /**
   * Get the size of an array.
   */
  function size() -> Integer {
    return value.size();
  }
  
  /**
   * Clear all contents.
   */
  function clear() {
    value <- ObjectValue();
  }

  /**
   * Iterate through the elements of an array.
   */
  function walk() -> Iterator<Buffer> {
    return value.walk();
  }

  /**
   * Iterate through the elements of a child array.
   *
   * - name: Name of the child.
   */
  function walk(name:String) -> Iterator<Buffer> {
    return getArray(name)!.walk();
  }

  /**
   * Get this as an object. This is an identity function, returning `this`,
   * as object of class type use their `read()` and `write()` member
   * functions to read and write to buffers as they please.
   */
  function getObject() -> Buffer? {
    return this;
  }

  /**
   * Get this as an array.
   */
  function getArray() -> Buffer? {
    if value.isArray() {
      return this;
    } else {
      return nil;
    }
  }
  
  /**
   * Get this as a Boolean.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getBoolean() -> Boolean? {
    return value.getBoolean();
  }

  /**
   * Get this as an integer.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getInteger() -> Integer? {
    return value.getInteger();
  }

  /**
   * Get this as a real.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getReal() -> Real? {
    return value.getReal();
  }

  /**
   * Get this as a string.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function getString() -> String? {
    return value.getString();
  }
  
  /**
   * Get this as a vector of Booleans.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getBooleanVector() -> Boolean[_]? {
    return value.getBooleanVector();
  }

  /**
   * Get this as a vector of integers.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getIntegerVector() -> Integer[_]? {
    return value.getIntegerVector();
  }

  /**
   * Get this as a vector of reals.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getRealVector() -> Real[_]? {
    return value.getRealVector();
  }

  /**
   * Get this as a matrix of Booleans.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getBooleanMatrix() -> Boolean[_,_]? {
    return value.getBooleanMatrix();
  }

  /**
   * Get this as a matrix of integers.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getIntegerMatrix() -> Integer[_,_]? {
    return value.getIntegerMatrix();
  }

  /**
   * Get this as a matrix of reals.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getRealMatrix() -> Real[_,_]? {
    return value.getRealMatrix();
  }

  /**
   * Get this as a positive definite symmetric matrix of reals.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getLLT() -> LLT? {
    let x <- getRealMatrix();
    if x? {
      return llt(x!);
    } else {
      return nil;
    }
  }

  /**
   * Get the size of an array.
   */
  function size(name:String) -> Integer {
    let array <- getArray(name);
    if array? {
      return array!.size();
    } else {
      return 0;
    }
  }

  /**
   * Get a child as an object.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getObject(name:String) -> Buffer? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getObject();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as an array.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getArray(name:String) -> Buffer? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getArray();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a Boolean.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getBoolean(name:String) -> Boolean? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getBoolean();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as an integer.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getInteger(name:String) -> Integer? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getInteger();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a real.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getReal(name:String) -> Real? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getReal();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a string.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function getString(name:String) -> String? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getString();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a vector of Booleans.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getBooleanVector(name:String) -> Boolean[_]? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getBooleanVector();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a vector of integers.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getIntegerVector(name:String) -> Integer[_]? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getIntegerVector();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a vector of reals.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function getRealVector(name:String) -> Real[_]? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getRealVector();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a matrix of Booleans.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getBooleanMatrix(name:String) -> Boolean[_,_]? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getBooleanMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a matrix of integers.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getIntegerMatrix(name:String) -> Integer[_,_]? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getIntegerMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a matrix of reals.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getRealMatrix(name:String) -> Real[_,_]? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getRealMatrix();
    } else {
      return nil;
    }
  }

  /**
   * Get a child as a symmetric positive definite matrix.
   *
   * - name: Name of the child.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function getLLT(name:String) -> LLT? {
    let buffer <- getChild(name);
    if buffer? {
      return buffer!.getLLT();
    } else {
      return nil;
    }
  }

  /**
   * Get this as an object.
   *
   * - value: The object.
   *
   * Return: The object.
   */
  function get(value:Object?) -> Object? {
    if value? {
      value!.read(this);
    }
    return value;
  }

  /**
   * Get this as a Boolean.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:Boolean?) -> Boolean? {
    return getBoolean();
  }

  /**
   * Get this as an integer.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:Integer?) -> Integer? {
    return getInteger();
  }
  
  /**
   * Get this as a real.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:Real?) -> Real? {
    return getReal();
  }

  /**
   * Get this as a string.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is of a compatible type.
   */
  function get(value:String?) -> String? {
    return getString();
  }

  /**
   * Get this as a vector of Booleans.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(value:Boolean[_]?) -> Boolean[_]? {
    return getBooleanVector();
  }

  /**
   * Get this as a vector of integers.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(value:Integer[_]?) -> Integer[_]? {
    return getIntegerVector();
  }

  /**
   * Get this as a vector of reals.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(value:Real[_]?) -> Real[_]? {
    return getRealVector();
  }

  /**
   * Get this as a matrix of Booleans.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:Boolean[_,_]?) -> Boolean[_,_]? {
    return getBooleanMatrix();
  }

  /**
   * Get this as a matrix of integers.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:Integer[_,_]?) -> Integer[_,_]? {
    return getIntegerMatrix();
  }

  /**
   * Get this as a matrix of reals.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:Real[_,_]?) -> Real[_,_]? {
    return getRealMatrix();
  }

  /**
   * Get this as a symmetric positive definite matrix of reals.
   *
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(value:LLT?) -> LLT? {
    return getLLT();
  }

  /**
   * Get an object.
   *
   * - name: Name of the child.
   * - value: The object.
   *
   * Return: The object.
   */
  function get(name:String, value:Object?) -> Object? {
    let buffer <- getObject(name);
    if buffer? {
      return buffer!.get(value);
    } else {
      return nil;
    }
  }

  /**
   * Get a Boolean.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(name:String, value:Boolean?) -> Boolean? {
    return getBoolean(name);
  }

  /**
   * Get an integer.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(name:String, value:Integer?) -> Integer? {
    return getInteger(name);
  }

  /**
   * Get a real.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(name:String, value:Real?) -> Real? {
    return getReal(name);
  }

  /**
   * Get a string.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if the given entry exists and is of a
   * compatible type.
   */
  function get(name:String, value:String?) -> String? {
    return getString(name);
  }

  /**
   * Get a vector of Booleans.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(name:String, value:Boolean[_]?) -> Boolean[_]? {
    return getBooleanVector(name);
  }

  /**
   * Get a vector of integers.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(name:String, value:Integer[_]?) -> Integer[_]? {
    return getIntegerVector(name);
  }

  /**
   * Get a vector of reals.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array with all elements
   * of a compatible type.
   */
  function get(name:String, value:Real[_]?) -> Real[_]? {
    return getRealVector(name);
  }

  /**
   * Get a matrix of Booleans.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(name:String, value:Boolean[_,_]?) -> Boolean[_,_]? {
    return getBooleanMatrix(name);
  }

  /**
   * Get a matrix of integers.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(name:String, value:Integer[_,_]?) -> Integer[_,_]? {
    return getIntegerMatrix(name);
  }

  /**
   * Get a matrix of reals.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(name:String, value:Real[_,_]?) -> Real[_,_]? {
    return getRealMatrix(name);
  }

  /**
   * Get a symmetric positive definite matrix of reals.
   *
   * - name: Name of the child.
   * - value: Unused, but necessary for overload resolution.
   *
   * Return: An optional with a value if this is an array where all elements
   * are themselves arrays of the same length and compatible type.
   */
  function get(name:String, value:LLT?) -> LLT? {
    return getLLT(name);
  }
  
  /**
   * Set this as an object.
   */
  function setObject() -> Buffer {
    v:ObjectValue;
    this.value <- v;
    return this;
  }
  
  /**
   * Set this as an array.
   */
  function setArray() -> Buffer {
    v:ArrayValue;
    this.value <- v;
    return this;
  }

  /**
   * Set this as nil.
   */
  function setNil() {
    v:NilValue;
    this.value <- v;
  }

  /**
   * Set this as a Boolean.
   *
   * - value: Value.
   */
  function setBoolean(value:Boolean) {
    v:BooleanValue(value);
    this.value <- v;
  }

  /**
   * Set this as an integer.
   *
   * - value: Value.
   */
  function setInteger(value:Integer) {
    v:IntegerValue(value);
    this.value <- v;
  }

  /**
   * Set this as a real.
   *
   * - value: Value.
   */
  function setReal(value:Real) {
    v:RealValue(value);
    this.value <- v;
  }

  /**
   * Set this as a string.
   *
   * - value: Value.
   */
  function setString(value:String) {
    v:StringValue(value);
    this.value <- v;
  }

  /**
   * Set this as a vector of Booleans.
   *
   * - value: Value.
   */
  function setBooleanVector(value:Boolean[_]) {
    v:BooleanVectorValue(value);
    this.value <- v;
  }

  /**
   * Set this as a vector of integers.
   *
   * - value: Value.
   */
  function setIntegerVector(value:Integer[_]) {
    v:IntegerVectorValue(value);
    this.value <- v;
  }

  /**
   * Set this as a vector of reals.
   *
   * - value: Value.
   */
  function setRealVector(value:Real[_]) {
    v:RealVectorValue(value);
    this.value <- v;
  }

  /**
   * Set this as a vector of objects.
   *
   * - value: Value.
   */
  function setObjectVector(value:Object[_]) {
    setArray();
    for n in 1..length(value) {
      push().set(value[n]);
    }
  }
  
  /**
   * Set this as matrix of Booleans.
   *
   * - value: Value.
   */
  function setBooleanMatrix(value:Boolean[_,_]) {
    v:BooleanMatrixValue(value);
    this.value <- v;
  }

  /**
   * Set this as a matrix of integers.
   *
   * - value: Value.
   */
  function setIntegerMatrix(value:Integer[_,_]) {
    v:IntegerMatrixValue(value);
    this.value <- v;
  }

  /**
   * Set this as a matrix of reals.
   *
   * - value: Value.
   */
  function setRealMatrix(value:Real[_,_]) {
    v:RealMatrixValue(value);
    this.value <- v;
  }

  /**
   * Set this as a symmetric positive definite matrix of reals.
   *
   * - value: Value.
   */
  function setLLT(value:LLT) {
    setRealMatrix(canonical(value));
  }

  /**
   * Set this as a matrix of objects.
   *
   * - value: Value.
   */
  function setObjectMatrix(value:Object[_,_]) {
    setArray();
    for i in 1..rows(value) {
      let buffer <- push().setArray();
      for j in 1..columns(value) {
        buffer.push().set(value[i,j]);
      }
    }
  }

  /**
   * Set child as an object.
   *
   * - name: Name of the child.
   */
  function setObject(name:String) -> Buffer {
    return setChild(name).setObject();
  }
  
  /**
   * Set child as an array.
   *
   * - name: Name of the child.
   */
  function setArray(name:String) -> Buffer {
    return setChild(name).setArray();
  }

  /**
   * Set child as nil.
   *
   * - name: Name of the child.
   */
  function setNil(name:String) {
    setChild(name).setNil();
  }

  /**
   * Set child as a Boolean.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setBoolean(name:String, value:Boolean) {
    setChild(name).setBoolean(value);
  }

  /**
   * Set child as an integer.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setInteger(name:String, value:Integer) {
    setChild(name).setInteger(value);
  }

  /**
   * Set child as a real.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setReal(name:String, value:Real) {
    setChild(name).setReal(value);
  }

  /**
   * Set child as a string.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setString(name:String, value:String) {
    setChild(name).setString(value);
  }

  /**
   * Set child as a vector of Booleans.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setBooleanVector(name:String, value:Boolean[_]) {
    setChild(name).setBooleanVector(value);
  }

  /**
   * Set child as a vector of integers.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setIntegerVector(name:String, value:Integer[_]) {
    setChild(name).setIntegerVector(value);
  }

  /**
   * Set child as a vector of reals.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setRealVector(name:String, value:Real[_]) {
    setChild(name).setRealVector(value);  
  }

  /**
   * Set child as a vector of objects.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setObjectVector(name:String, value:Object[_]) {
    setChild(name).setObjectVector(value);  
  }

  /**
   * Set child as a matrix of Booleans.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setBooleanMatrix(name:String, value:Boolean[_,_]) {
    setChild(name).setBooleanMatrix(value);  
  }

  /**
   * Set child as a matrix of integers.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setIntegerMatrix(name:String, value:Integer[_,_]) {
    setChild(name).setIntegerMatrix(value);  
  }

  /**
   * Set child as a matrix of reals.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setRealMatrix(name:String, value:Real[_,_]) {
    setChild(name).setRealMatrix(value);  
  }

  /**
   * Set child as a symmetric positive definite matrix of reals.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setLLT(name:String, value:LLT) {
    setChild(name).setLLT(value);  
  }

  /**
   * Set child as a matrix of objects.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function setObjectMatrix(name:String, value:Object[_,_]) {
    setChild(name).setObjectMatrix(value);  
  }
  
  /**
   * Set this as a Boolean.
   *
   * - value: Value.
   */
  function set(value:Boolean) {
    setBoolean(value);
  }

  /**
   * Set this as an integer.
   *
   * - value: Value.
   */
  function set(value:Integer) {
    setInteger(value);
  }

  /**
   * Set this as a real.
   *
   * - value: Value.
   */
  function set(value:Real) {
    setReal(value);
  }

  /**
   * Set this as a string.
   *
   * - value: Value.
   */
  function set(value:String) {
    setString(value);
  }
  
  /**
   * Set this as an object.
   *
   * - value: Value.
   */
  function set(value:Object) {
    setObject();
    value.write(this);
  }
  
  /**
   * Set this as a vector of Booleans.
   *
   * - value: Value.
   */
  function set(value:Boolean[_]) {
    setBooleanVector(value);
  }

  /**
   * Set this as a vector of integers.
   *
   * - value: Value.
   */
  function set(value:Integer[_]) {
    setIntegerVector(value);
  }

  /**
   * Set this as a vector of reals.
   *
   * - value: Value.
   */
  function set(value:Real[_]) {
    setRealVector(value);
  }

  /**
   * Set this as a vector of objects.
   *
   * - value: Value.
   */
  function set(value:Object[_]) {
    setObjectVector(value);
  }

  /**
   * Set this as matrix of Booleans.
   *
   * - value: Value.
   */
  function set(value:Boolean[_,_]) {
    setBooleanMatrix(value);
  }

  /**
   * Set this as a matrix of integers.
   *
   * - value: Value.
   */
  function set(value:Integer[_,_]) {
    setIntegerMatrix(value);
  }

  /**
   * Set this as a matrix of reals.
   *
   * - value: Value.
   */
  function set(value:Real[_,_]) {
    setRealMatrix(value);
  }

  /**
   * Set this as a symmetric positive definite matrix of reals.
   *
   * - value: Value.
   */
  function set(value:LLT) {
    setLLT(value);
  }

  /**
   * Set this as a matrix of objects.
   *
   * - value: Value.
   */
  function set(value:Object[_,_]) {
    setObjectMatrix(value);
  }

  /**
   * Set a Boolean.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Boolean) {
    setBoolean(name, value);
  }

  /**
   * Set an integer.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Integer) {
    setInteger(name, value);
  }

  /**
   * Set a real.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Real) {
    setReal(name, value);
  }

  /**
   * Set a string.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:String) {
    setString(name, value);
  }

  /**
   * Set an object.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Object) {
    setChild(name).set(value);
  }
  
  /**
   * Set a vector of Booleans.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Boolean[_]) {
    setBooleanVector(name, value);
  }

  /**
   * Set a vector of integers.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Integer[_]) {
    setIntegerVector(name, value);
  }

  /**
   * Set a vector of reals.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Real[_]) {
    setRealVector(name, value);
  }

  /**
   * Set a vector of objects.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Object[_]) {
    setObjectVector(name, value);
  }

  /**
   * Set a matrix of Booleans.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Boolean[_,_]) {
    setBooleanMatrix(name, value);
  }

  /**
   * Set a matrix of integers.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Integer[_,_]) {
    setIntegerMatrix(name, value);
  }

  /**
   * Set a matrix of reals.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Real[_,_]) {
    setRealMatrix(name, value);
  }

  /**
   * Set a symmetric positive definite matrix of reals.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:LLT) {
    setLLT(name, value);
  }
  
  /**
   * Set a matrix of objects.
   *
   * - name: Name of the child.
   * - value: Value.
   */
  function set(name:String, value:Object[_,_]) {
    setObjectMatrix(name, value);
  }
}

/**
 * Create a Buffer.
 *
 * - root: Root element.
 */
function Buffer(root:Value) -> Buffer {
  o:Buffer;
  o.value <- root;
  return o;
}

/**
 * Create a Buffer.
 */
function Buffer() -> Buffer {
  o:Buffer;
  return o;
}
