/**
 * Event triggered by an *observe*, typically from the `~>` operator.
 *
 * - x: Associated value.
 * - p: Associated distribution.
 *
 * ```mermaid
 * classDiagram
 *    Event <|-- SimulateEvent
 *    Event <|-- ObserveEvent
 *    Event <|-- AssumeEvent
 *    Event <|-- FactorEvent
 *    link Event "../Event/"
 *    link SimulateEvent "../SimulateEvent/"
 *    link ObserveEvent "../ObserveEvent/"
 *    link AssumeEvent "../AssumeEvent/"
 *    link FactorEvent "../FactorEvent/"
 * ```
 */
final class ObserveEvent<Value>(x:Value, p:Distribution<Value>) < Event {
  /**
   * Value.
   */
  x:Value <- x;
  
  /**
   * Distribution.
   */
  p:Distribution<Value> <- p;

  function record() -> Record {
    return ObserveRecord(x);
  }

  function coerce(record:Record) -> ObserveRecord<Value> {
    auto r <- ObserveRecord<Value>?(record);
    if !r? {
      error("incompatible trace");
    }
    return r!;
  }

  function accept(handler:PlayHandler) {
    handler.doHandle(this);
  }
  
  function accept(handler:MoveHandler) {
    handler.doHandle(this);
  }

  function accept(record:Record, handler:PlayHandler) {
    handler.doHandle(coerce(record), this);
  }

  function accept(record:Record, handler:MoveHandler) {
    handler.doHandle(coerce(record), this);
  }
}

/**
 * Create an ObserveEvent.
 */
function ObserveEvent<Value>(x:Value, p:Distribution<Value>) ->
    ObserveEvent<Value> {
  return construct<ObserveEvent<Value>>(x, p);
}
