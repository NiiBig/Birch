/**
 * Marginalized particle Gibbs sampler.
 *
 * ```mermaid
 * classDiagram
 *    ParticleSampler <|-- MarginalizedParticleImportanceSampler
 *    ParticleSampler <|-- ConditionalParticleSampler
 *    ConditionalParticleSampler <|-- ParticleGibbsSampler
 *    ConditionalParticleSampler <|-- MarginalizedParticleGibbsSampler
 *    link ParticleSampler "../ParticleSampler/"
 *    link MarginalizedParticleImportanceSampler "../MarginalizedParticleImportanceSampler/"
 *    link ConditionalParticleSampler "../ConditionalParticleSampler/"
 *    link ParticleGibbsSampler "../ParticleGibbsSampler/"
 *    link MarginalizedParticleGibbsSampler "../MarginalizedParticleGibbsSampler/"
 * ```
 */
class MarginalizedParticleGibbsSampler < ConditionalParticleSampler {
  override function sample(filter:ConditionalParticleFilter,
      archetype:Model) {
    filter.alreadyInitialized <- false;
  }

  override function sample(filter:ConditionalParticleFilter,
      archetype:Model, n:Integer) {
    clearDiagnostics();
    filter.initialize(archetype);
    filter.filter();
    pushDiagnostics(filter);
    for t in 1..filter.size() {
      filter.filter(t);
      pushDiagnostics(filter);
    }

    /* draw a single sample and weight with normalizing constant estimate */
    filter.b <- ancestor(filter.w);
    if filter.b == 0 {
      error("particle filter degenerated");
    }
    x <- filter.x[filter.b].m;
    w <- 0.0;

    collect();
  }
}
