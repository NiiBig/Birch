/**
 * Particle Gibbs sampler.
 *
 * ```mermaid
 * classDiagram
 *    ParticleSampler <|-- MarginalizedParticleImportanceSampler
 *    ParticleSampler <|-- ConditionalParticleSampler
 *    ConditionalParticleSampler <|-- ParticleGibbsSampler
 *    ConditionalParticleSampler <|-- MarginalizedParticleGibbsSampler
 *    link ParticleSampler "../ParticleSampler/"
 *    link MarginalizedParticleImportanceSampler "../MarginalizedParticleImportanceSampler/"
 *    link ConditionalParticleSampler "../ConditionalParticleSampler/"
 *    link ParticleGibbsSampler "../ParticleGibbsSampler/"
 *    link MarginalizedParticleGibbsSampler "../MarginalizedParticleGibbsSampler/"
 * ```
 */
class ParticleGibbsSampler < ConditionalParticleSampler {
  override function sample(filter:ConditionalParticleFilter,
      archetype:Model) {
    filter.alreadyInitialized <- true;
  }

  override function sample(filter:ConditionalParticleFilter, archetype:Model,
      n:Integer) {
    clearDiagnostics();

    if filter.r? {
      /* Gibbs update of parameters */
      r:Tape<Record> <- filter.r!;
      r':Tape<Record>;

      let x' <- clone(archetype);
      let handler <- PlayHandler(true);
      handler.output <- r';
      with (handler) {
        x'.simulate();
      }
      let w' <- handler.w;

      handler <- PlayHandler(filter.delayed);
      handler.input <- filter.r!;
      with (handler) {
        for t in 1..filter.size() {
          x'.simulate(t);
        }
      }
      w' <- w' + handler.w;

      x' <- clone(archetype);
      handler <- PlayHandler(filter.delayed);
      handler.input <- r';
      with (handler) {
        x'.simulate();
      }
      lnormalize.pushBack(handler.w);
      ess.pushBack(1.0);
      npropagations.pushBack(1);
      filter.r!.rewind();
    }

    filter.initialize(archetype);
    filter.filter();
    pushDiagnostics(filter);
    for t in 1..filter.size() {
      filter.filter(t);
      pushDiagnostics(filter);
    }

    /* draw a single sample and weight with normalizing constant estimate */
    filter.b <- ancestor(filter.w);
    if filter.b == 0 {
      error("particle filter degenerated");
    }
    x <- filter.x[filter.b].m;
    w <- 0.0;

    collect();
  }
}
