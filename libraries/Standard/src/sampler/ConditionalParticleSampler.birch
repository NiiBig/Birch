/**
 * Particle sampler that requires a conditional particle filter.
 *
 * ```mermaid
 * classDiagram
 *    ParticleSampler <|-- MarginalizedParticleImportanceSampler
 *    ParticleSampler <|-- ConditionalParticleSampler
 *    ConditionalParticleSampler <|-- ParticleGibbsSampler
 *    ConditionalParticleSampler <|-- MarginalizedParticleGibbsSampler
 *    link ParticleSampler "../ParticleSampler/"
 *    link MarginalizedParticleImportanceSampler "../MarginalizedParticleImportanceSampler/"
 *    link ConditionalParticleSampler "../ConditionalParticleSampler/"
 *    link ParticleGibbsSampler "../ParticleGibbsSampler/"
 *    link MarginalizedParticleGibbsSampler "../MarginalizedParticleGibbsSampler/"
 * ```
 */
abstract class ConditionalParticleSampler < ParticleSampler {
  final function sample(filter:ParticleFilter, archetype:Model) {
    auto conditionalFilter <- ConditionalParticleFilter?(filter);
    if conditionalFilter? {
      sample(conditionalFilter!, archetype);
    } else {
      error("A ConditionalParticleSampler requires a ConditionalParticleFilter.");
    }
  }

  final function sample(filter:ParticleFilter, archetype:Model,
      t:Integer) {
    auto conditionalFilter <- ConditionalParticleFilter?(filter);
    if conditionalFilter? {
      sample(conditionalFilter!, archetype, t);
    } else {
      error("A ConditionalParticleSampler requires a ConditionalParticleFilter.");
    }
  }
  
  /**
   * Conditional version of `sample(...)`.
   */
  abstract function sample(filter:ConditionalParticleFilter,
      archetype:Model);

  /**
   * Conditional version of `sample(...)`.
   */
  abstract function sample(filter:ConditionalParticleFilter,
      archetype:Model, t:Integer);
}
