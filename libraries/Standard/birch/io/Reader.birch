/**
 * Reader.
 *
 * Typical use is to use the `Reader` factory function to instantiate an
 * object of an appropriate derived class based on the file extension of the
 * given path:
 *
 *     auto reader <- Reader(path);
 *
 * The whole contents of the file can then be read into a buffer with:
 *
 *     auto buffer <- reader.scan();
 *
 * Finally, close the file:
 *
 *     reader.close();
 */
abstract class Reader {  
  /**
   * Open a file.
   *
   * - path: Path of the file.
   */
  abstract function open(path:String);
  
  /**
   * Read the entire contents of the file.
   *
   * - buffer: Buffer into which to read.
   */
  abstract function scan() -> Buffer;

  /**
   * Start reading the contents of the file sequentially, if the root element
   * is a sequence. This avoids reading the entire file into memory at once.
   *
   * The call should be followed by alternating calls to `hasNext()` and
   * `next()` to read each element of the sequence, e.g.:
   *
   *     reader.walk();
   *     while reader.hasNext() {
   *       auto buffer <- reader.next();
   *       ...
   *     }
   *
   * See also: `hasNext()`, `next()`.
   */
  abstract function walk();

  /**
   * When reading the contents of the file sequentially, is there another
   * element?
   *
   * See also: `walk()`, `next()`.
   */
  abstract function hasNext() -> Boolean;

  /**
   * When reading the contents of the file sequentially, get the next element.
   */
  abstract function next() -> Buffer;
  
  /**
   * Close the file.
   */
  abstract function close();
}

/**
 * Create a reader for a file.
 *
 * - path: Path of the file.
 *
 * Returns: the reader.
 *
 * The file extension of `path` is used to determine the precise type of the
 * returned object. Supported file extension are `.json` and `.yml`.
 */
function Reader(path:String) -> Reader {
  auto ext <- extension(path);
  result:Reader?;
  if ext == ".json" {
    reader:JSONReader;
    reader.open(path);
    result <- reader;
  } else if ext == ".yml" {
    reader:YAMLReader;
    reader.open(path);
    result <- reader;
  }
  if !result? {
    error("unrecognized file extension '" + ext + "' in path '" + path +
        "'; supported extensions are '.json' and '.yml'.");
  }
  return result!;
}
