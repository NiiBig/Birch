version: 2.1

orbs:
  codecov: codecov/codecov@1.1.1
  slack: circleci/slack@3.4.2

executors:
  test:
    docker:
      - image: lawmurray/birch-circleci:ubuntu-20.04

commands:
  environment:
    description: Set environment variables.
    steps:
      - run:
          name: Environment
          command: |
              echo "export BIRCH_PREFIX=/root/project" >> $BASH_ENV
              echo "export BIRCH_FLAGS='--unit=dir --jobs=2'" >> $BASH_ENV
              echo "export CONFIGURE_FLAGS='--disable-debug --enable-test --enable-release'" >> $BASH_ENV
              echo "export PATH=$BIRCH_PREFIX/bin:$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=$BIRCH_PREFIX/include:$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=$BIRCH_PREFIX/lib:$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export OMP_NUM_THREADS=2" >> $BASH_ENV
            # ^ limited to two parallel jobs to avoid exhausting memory

  slack:
    description: Send Slack message on failure
    steps:
      - slack/status:
         fail_only: true

  driver:
    description: Build the driver.
    steps:
      - environment
      - run:
          name: Build
          command: |
              cd driver
              ./bootstrap
              ./configure --prefix=$BIRCH_PREFIX CXXFLAGS="-Wall -Wno-overloaded-virtual -g -O0 -fno-inline -fprofile-abs-path --coverage"
              make -j 4
              make install
      - slack
      - persist_to_workspace:
          root: .
          paths:
            - '*'

  cxx:
    description: Build a C++ library.
    parameters:
      package:
        description: Name of the library.
        type: string
    steps:
      - environment
      - attach_workspace:
          at: .
      - run:
          name: Build C++ library
          command: |
              cd << parameters.package >>
              ./bootstrap
              ./configure --prefix=$BIRCH_PREFIX $CONFIGURE_FLAGS
              make -j 4
              make install
      - slack
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.package >>
            - lib/<< parameters.package >>*
            - include/<< parameters.package >>*
    
  library:
    description: Build a Birch library package and optionally run tests.
    parameters:
      package:
        description: Name of package (e.g. Standard).
        type: string
      tar:
        description: Tarname of package (e.g. birch-standard).
        type: string
      smoke:
        description: Run smoke tests?
        type: boolean
        default: false
      unit:
        description: Run unit tests?
        type: boolean
        default: false
    steps:
      - environment
      - attach_workspace:
          at: .
      - run:
          name: Build
          command: |
              cd libraries/<< parameters.package >>
              birch build $BIRCH_FLAGS
              birch install
      - when:
          condition: << parameters.smoke >>
          steps:
            - run:
                name: Run smoke tests
                command: |
                    cd libraries/<< parameters.package >>
                    ./smoke.sh
      - when:
          condition: << parameters.unit >>
          steps:
            - run:
                name: Run unit tests
                command: |
                    cd libraries/<< parameters.package >>
                    ./test.sh
      - slack
      - codecov/upload
      - persist_to_workspace:
          root: .
          paths:
            - libraries/<< parameters.package >>
            - lib/lib<< parameters.tar >>*
            - include/<< parameters.tar >>*
            
  example:
    description: "Build a Birch example package and optionally run tests."
    parameters:
      package:
        description: Name of package (e.g. LinearGaussian).
        type: string
      smoke:
        description: Run smoke tests?
        type: boolean
        default: false
      unit:
        description: Run unit tests?
        type: boolean
        default: false
      mongodb:
        description: Upload unit test output to MongoDB Atlas?
        type: boolean
        default: false
    steps:
      - environment
      - attach_workspace:
          at: .
      - run:
          name: Build
          command: |
              cd examples/<< parameters.package >>
              birch build $BIRCH_FLAGS
      - when:
          condition: << parameters.smoke >>
          steps:
            - run:
                name: Run smoke tests
                command: |
                    cd examples/<< parameters.package >>
                    ./smoke.sh
      - when:
          condition: << parameters.unit >>
          steps:
            - run:
                name: Run unit tests
                command: |
                    cd examples/<< parameters.package >>
                    ./test.sh
      - slack
      - codecov/upload
      - when:
          condition: << parameters.mongodb >>
          steps:
            - run:
                name: MongoDB import
                command: |
                    cd examples/<< parameters.package >>
                    mongoimport --host $MONGODB_HOST --ssl --username $MONGODB_USERNAME --password $MONGODB_PASSWORD --authenticationDatabase admin --db $CIRCLE_BRANCH --collection << parameters.package >> --jsonArray --file output/*.json

jobs:
  driver:
    executor: test
    steps:
      - checkout
      - driver

  libbirch:
    executor: test
    steps:
      - cxx:
          package: libbirch

  libraries_Standard:
    executor: test
    steps:
      - library:
          package: Standard
          tar: birch-standard
          smoke: true
          unit: true
          
  libraries_Cairo:
    executor: test
    steps:
      - library:
          package: Cairo
          tar: birch-cairo

  libraries_SQLite:
    executor: test
    steps:
      - library:
          package: SQLite
          tar: birch-sqlite

  examples_LinearGaussian:
    executor: test
    steps: 
      - example:
          package: LinearGaussian
          smoke: true
          unit: true
          mongodb: true

  examples_LinearRegression:
    executor: test
    steps: 
      - example:
          package: LinearRegression
          smoke: true
          unit: true
          mongodb: true

  examples_MixedGaussian:
    executor: test
    steps: 
      - example:
          package: MixedGaussian
          smoke: true
          unit: true
          mongodb: true

  examples_MultiObjectTracking:
    executor: test
    steps: 
      - example:
          package: MultiObjectTracking
          smoke: true
          unit: true
          mongodb: true

  examples_PoissonGaussian:
    executor: test
    steps: 
      - example:
          package: PoissonGaussian
          smoke: true
          unit: true
          mongodb: true

  examples_SIR:
    executor: test
    steps: 
      - example:
          package: SIR
          smoke: true
          unit: true
          mongodb: true

  examples_VectorBorneDisease:
    executor: test
    steps: 
      - example:
          package: VectorBorneDisease
          smoke: true
          unit: true
          mongodb: true

workflows:
  version: 2
  test:
    jobs:
      - driver

      - libbirch:
          requires:
            - driver

      - libraries_Standard:
          requires:
            - libbirch

      - libraries_Cairo:
          requires:
            - libraries_Standard

      - libraries_SQLite:
          requires:
            - libraries_Standard
    
      - examples_LinearGaussian:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_LinearRegression:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_MixedGaussian:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_PoissonGaussian:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_SIR:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_MultiObjectTracking:
          requires:
            - libraries_Cairo
            - libraries_SQLite
      
      - examples_VectorBorneDisease:
          requires:
            - libraries_Cairo
            - libraries_SQLite
