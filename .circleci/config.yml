version: 2.1

orbs:
  codecov: codecov/codecov@1.1.1
  slack: circleci/slack@3.4.2

executors:
  test:
    docker:
      - image: lawmurray/birch-circleci:opensuse-tumbleweed

commands:
  environment:
    description: Preparing more environment variables
    steps:
      - run:
          name: Git check
          description: Fail if not a git repository
          command: git describe
            # ensures failure if git describe to find version number fails below
      - run:
          name: Environment
          description: Set environment variables for builds
          command: |
              echo "export PREFIX=~/project" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib:$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export OMP_NUM_THREADS=2" >> $BASH_ENV
              echo "export BIRCH_FLAGS='--unit=dir --jobs=2'" >> $BASH_ENV
              echo "export CONFIGURE_FLAGS='--disable-debug --enable-test --enable-release'" >> $BASH_ENV
              echo "export VERSION=`git describe | sed -E 's/v([0-9]+)-([0-9]+)-g[0-9a-f]+/\1.\2/'`" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV
            # limited to two parallel jobs to avoid exhausting memory

  slack:
    description: Send Slack message on failure
    steps:
      - slack/status:
         fail_only: true

  driver:
    description: Build the driver
    steps:
      - checkout
      - environment
      - run:
          name: Build
          command: |
              cd driver
              ./bootstrap
              ./configure --prefix=$PREFIX CXXFLAGS="-Wall -Wno-overloaded-virtual -g -O0 -fno-inline -fprofile-abs-path --coverage"
              make -j 4
              make install
      - slack
      - persist_to_workspace:
          root: .
          paths:
            - '*'
            - .*

  library:
    description: Build a C++ library
    parameters:
      package:
        description: Name of the library
        type: string
    steps:
      - attach_workspace:
          at: .
      - environment
      - run:
          name: Build C++ library
          command: |
              cd << parameters.package >>
              ./bootstrap
              ./configure --prefix=$PREFIX $CONFIGURE_FLAGS
              make -j 4
              make install
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.package >>
            - lib/<< parameters.package >>*
            - include/<< parameters.package >>*
      - slack
    
  package:
    description: Build a Birch package
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries).
        type: string
      package:
        description: Name of package (e.g. Standard).
        type: string
      tar:
        description: Tarname of package (e.g. birch-standard)
        type: string
      install:
        description: Install the package?
        type: boolean
        default: false
      smoke:
        description: Run smoke tests?
        type: boolean
        default: false
      unit:
        description: Run unit tests?
        type: boolean
        default: false
      mongodb:
        description: Upload output to MongoDB Atlas?
        type: boolean
        default: false
      persist:
        description: Persist to workspace?
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: .
      - environment
      - run:
          name: Build
          command: |
              cd << parameters.dir >>/<< parameters.package >>
              birch build --prefix=$PREFIX $CONFIGURE_FLAGS $BIRCH_FLAGS
      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Install
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    birch install
      - when:
          condition: << parameters.smoke >>
          steps:
            - run:
                name: Run smoke tests
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    export BIRCH_MODE=test
                    ./smoke.sh
      - when:
          condition: << parameters.unit >>
          steps:
            - run:
                name: Run unit tests
                command: |
                    cd << parameters.dir >>/<< parameters.package >>
                    export BIRCH_MODE=release
                    env time --format "$FORMAT" ./test.sh 2> time.txt
                  # ^ env time to use GNU time, not Bash built-in time
      - when:
          condition: << parameters.mongodb >>
          steps:
            - run:
                name: MongoDB upload
                command: |
                    if [[ -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" ]]
                    then
                      cd << parameters.dir >>/<< parameters.package >>
                      echo '{ "output": ' > output/mongodb.json
                      cat output/*.json >> output/mongodb.json
                      if [[ -e time.txt ]]
                      then
                        cat time.txt >> output/mongodb.json
                      fi
                      echo '}' >> output/mongodb.json
                      mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/$CIRCLE_BRANCH --collection << parameters.package >> --file output/mongodb.json
                    fi
      - when:
          condition: << parameters.persist >>
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - << parameters.dir >>/<< parameters.package >>
                  - lib/lib<< parameters.tar >>*
                  - include/<< parameters.tar >>*
      - codecov/upload
      - slack

  configure_osc:
    description: Configure Open Build Service command-line interface
    steps:
      - run:
          name: Configure OSC
          command: |
              if [[ -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" ]]
              then
                mkdir -p ~/.config/osc
                echo [general]                          > ~/.config/osc/oscrc
                echo apiurl = https://api.opensuse.org >> ~/.config/osc/oscrc
                echo [https://api.opensuse.org]        >> ~/.config/osc/oscrc
                echo user = $OSC_USERNAME              >> ~/.config/osc/oscrc
                echo pass = $OSC_PASSWORD              >> ~/.config/osc/oscrc
              fi

  osc:
    description: Update package on Open Build Service
    parameters:
      dir:
        description: Directory containing the package (e.g. libraries).
        type: string
        default: .
      package:
        description: Name of package (e.g. Standard).
        type: string
      tar:
        description: Tarname of package (e.g. birch-standard)
        type: string
    steps:
      - run:
          name: Update package
          command: |
              if [[ -n "$OSC_PROJECT" && -n "$OSC_USERNAME" && -n "$OSC_PASSWORD" && -n "$VERSION" ]]
              then
                cd << parameters.dir >>/<< parameters.package >>
                make dist
                osc checkout $OSC_PROJECT << parameters.tar >>
                cd $OSC_PROJECT/<< parameters.tar >>
                mv ../../<< parameters.tar >>-unversioned.tar.gz .
                for file in << parameters.tar >>.spec << parameters.tar >>.dsc debian.control PKGBUILD
                do
                  cat $file | 
                    sed -E "s/Version: [0-9]+.[0-9]+/Version: $VERSION/g" |
                    sed -E "s/pkgver=[0-9]+.[0-9]+/pkgver=$VERSION/g" |
                    sed -E "s/>=( ?)[0-9]+.[0-9]+/>=\\1$VERSION/g" |
                    sponge $file
                done
                osc commit -m "Updated to version $VERSION."
              fi

jobs:
  driver:
    executor: test
    steps:
      - driver

  libbirch:
    executor: test
    steps:
      - library:
          package: libbirch

  libraries_Standard:
    executor: test
    steps:
      - package:
          dir: libraries
          package: Standard
          tar: birch-standard
          install: true
          smoke: true
          unit: true
          persist: true
          
  libraries_Cairo:
    executor: test
    steps:
      - package:
          dir: libraries
          package: Cairo
          tar: birch-cairo
          install: true
          persist: true

  libraries_SQLite:
    executor: test
    steps:
      - package:
          dir: libraries
          package: SQLite
          tar: birch-sqlite
          install: true
          persist: true

  examples_LinearGaussian:
    executor: test
    steps: 
      - package:
          dir: examples
          package: LinearGaussian
          tar: birch-lineargaussian
          smoke: true
          unit: true
          mongodb: true

  examples_LinearRegression:
    executor: test
    steps: 
      - package:
          dir: examples
          package: LinearRegression
          tar: birch-linearregression
          smoke: true
          unit: true
          mongodb: true

  examples_MixedGaussian:
    executor: test
    steps: 
      - package:
          dir: examples
          package: MixedGaussian
          tar: birch-mixedgaussian
          smoke: true
          unit: true
          mongodb: true

  examples_MultiObjectTracking:
    executor: test
    steps: 
      - package:
          dir: examples
          package: MultiObjectTracking
          tar: birch-multiobjecttracking
          smoke: true
          unit: true
          mongodb: true

  examples_PoissonGaussian:
    executor: test
    steps: 
      - package:
          dir: examples
          package: PoissonGaussian
          tar: birch-poissongaussian
          smoke: true
          unit: true
          mongodb: true

  examples_SIR:
    executor: test
    steps: 
      - package:
          dir: examples
          package: SIR
          tar: birch-sir
          smoke: true
          unit: true
          mongodb: true

  examples_VectorBorneDisease:
    executor: test
    steps: 
      - package:
          dir: examples
          package: VectorBorneDisease
          tar: birch-vectorbornedisease
          smoke: true
          unit: true
          mongodb: true

  deploy_linux:
    executor: test
    steps:
      - attach_workspace:
          at: .
      - environment
      - configure_osc
      - osc:
          package: driver
          tar: birch
      - osc:
          package: libbirch
          tar: libbirch
      - osc:
          dir: libraries
          package: Standard
          tar: birch-standard
      - osc:
          dir: libraries
          package: Cairo
          tar: birch-cairo
      - osc:
          dir: libraries
          package: SQLite
          tar: birch-sqlite
      - slack

workflows:
  version: 2
  test:
    jobs:
      - driver

      - libbirch:
          requires:
            - driver

      - libraries_Standard:
          requires:
            - libbirch

      - libraries_Cairo:
          requires:
            - libraries_Standard

      - libraries_SQLite:
          requires:
            - libraries_Standard
    
      - examples_LinearGaussian:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_LinearRegression:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_MixedGaussian:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_PoissonGaussian:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_SIR:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - examples_MultiObjectTracking:
          requires:
            - libraries_Cairo
            - libraries_SQLite
      
      - examples_VectorBorneDisease:
          requires:
            - libraries_Cairo
            - libraries_SQLite

      - deploy_linux:
          filters:
            branches:
              only:
                - master
                - monorepo
          requires:
            - examples_LinearGaussian
            - examples_LinearRegression
            - examples_MixedGaussian
            - examples_PoissonGaussian
            - examples_SIR
            - examples_MultiObjectTracking
            - examples_VectorBorneDisease
