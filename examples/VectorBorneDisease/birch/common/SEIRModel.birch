/**
 *
 */
final class SEIRModel < Model {
  /**
   * Parameters.
   */
  θ:SEIRParameter;

  /**
   * States.
   */
  x:Tape<SEIRState>;

  function simulate() {
    /* prior for parameters */
    θ.ν <- 0.0;
    θ.μ <- 1.0;
    θ.λ ~ Beta(1.0, 1.0);
    θ.δ ~ Beta(1.0, 1.0);
    θ.γ ~ Beta(1.0, 1.0);

    /* prior for initial state */
    auto x <- this.x.current();
    x.Δs <- 0;
    x.Δe <- 0;
    x.Δi <- 1;
    x.Δr <- 0;
    x.s <- 0;
    x.e <- 0;
    x.i <- 1;
    x.r <- 0;
    x.n <- 1;
  }
  
  function simulate(t:Integer) {
    auto x <- this.x.current();
    auto ns <- (x.s*x.i + x.n - 1)/x.n;
    auto ne <- x.e;
    auto ni <- x.i;

    simulate(t, ns, ne, ni);
  }
  
  /**
   * Simulate.
   *
   * - t: Time step.
   * - ne: Number of trials from which to draw newly exposed.
   * - ni: Number of trials from which to draw newly infectious.
   * - nr: Number of trials from which to draw newly recovered.
   */
  function simulate(t:Integer, ne:Integer, ni:Integer, nr:Integer) {
    /* state */
    this.x.forward();
    auto x' <- this.x.current();
    auto x <- this.x.previous();

    /* transfers */
    x'.Δe <~ Binomial(ne, θ.λ);
    x'.Δi <~ Binomial(ni, θ.δ);
    x'.Δr <~ Binomial(nr, θ.γ);

    x'.s <- x.s - x'.Δe;
    x'.e <- x.e + x'.Δe - x'.Δi;
    x'.i <- x.i + x'.Δi - x'.Δr;
    x'.r <- x.r + x'.Δr;
    
    /* survival; we assume that if the survival rate is set to one, what is
     * meant is "all survive" regardless of the population size, and so do
     * not evaluate these */
    if !θ.μ.hasValue() || θ.μ.value() != 1.0 {
      x'.s <~ Binomial(x'.s, θ.μ);
      x'.e <~ Binomial(x'.e, θ.μ);
      x'.i <~ Binomial(x'.i, θ.μ);
      x'.r <~ Binomial(x'.r, θ.μ);
    }

    /* births */
    if !θ.ν.hasValue() || θ.ν.value() != 0.0 {
      x'.Δs <~ Binomial(x.n, θ.ν);
      x'.s <- x'.s + x'.Δs;
    }
    
    /* update total population */
    x'.n <- x'.s + x'.e + x'.i + x'.r;
  }

  function read(buffer:Buffer) {
    buffer.get("θ", θ);
    buffer.get("x", x);
  }

  function write(buffer:Buffer) {
    buffer.set("θ", θ);
    buffer.set("x", x);
  }
}
